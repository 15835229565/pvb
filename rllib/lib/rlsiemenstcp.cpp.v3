/***************************************************************************
                          rlsiemenstcp.cpp  -  description
                             -------------------
    begin                : Mon Mar 08 2004
    copyright            : (C) 2004 by Rainer Lehrig
    email                : lehrig@t-online.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This library is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as        *
 *   published by the Free Software Foundation                             *
 *                                                                         *
 ***************************************************************************/

//
// S7_200 tested
// S7_300 not tested
// S7_400 not tested
// S5     not tested
//

#include "rlsiemenstcp.h"
#include "rlwthread.h"
#include "rlcutil.h"
#include <stdio.h>
#include <string.h>
#define TIMEOUT 2000
#define ISO_PORT 102

extern int rlDebugPrintfState;

rlSiemensTCP::rlSiemensTCP(const char *a, int _plc_type, int _fetch_write, int rackNumber, int slotNumber)
             :rlSocket(a,ISO_PORT,1)
{
  plc_type = _plc_type;
  fetch_write = _fetch_write;
  doConnect(rackNumber,slotNumber);
}

rlSiemensTCP::~rlSiemensTCP()
{
  rlSocket::disconnect();
}

void rlSiemensTCP::doConnect(int rackNumber, int slotNumber)
{
  int i,i2,ret,length;
  static const unsigned char s7_200_connect_block[] =
    {3,0,0,22,0x11,0xE0,0x00,0x00,0x00,0x01,0x00,0xC1,2,'M','W',0xC2,2,'M','W',0xC0,1,9};
  static const unsigned char s7_300_connect_block[] =
    {3,0,0,22,0x11,0xE0,0x00,0x00,0x00,0x01,0x00,0xC1,2,1  ,0  ,0xC2,2,1  ,2  ,0xC0,1,9};
  static unsigned char other_connect_block[] =
    {3,0,0,22,0x11,0xE0,0x00,0x00,0x00,0x01,0x00,0xC1,2,1  ,0  ,0xC2,2,0  ,1  ,0xC0,1,9};
  unsigned char connect_block[22];
  
  unsigned char connect_block2[] = 
    {0x03,0x00,0x00,0x19,0x02,0xF0,0x80,0x32,0x01,0x00,0x00,0xCC,0xC1,0x00,0x08,0x00,0x00,0xF0,0x00,0x00,0x01,0x00,0x01,0x03,0xC0};  
  unsigned char buf[512];
  
  if(rackNumber != -1) other_connect_block[17] = rackNumber;
  if(slotNumber != -1) other_connect_block[18] = slotNumber;
  if     (plc_type == S7_200) memcpy(connect_block,s7_200_connect_block,sizeof(connect_block));
  else if(plc_type == S7_300) memcpy(connect_block,s7_300_connect_block,sizeof(connect_block));
  else                        memcpy(connect_block,other_connect_block,sizeof(connect_block));
  
  for(i=0; i<3; i++)
  {
    if(rlSocket::connect() >= 0)
    {
      // exchange TSAP
      rlDebugPrintf("write connect_block\n");
      rlSocket::write(connect_block,sizeof(connect_block));
      ret = rlSocket::read(&ih,sizeof(ih),TIMEOUT);
      rlDebugPrintf("read ih ret=%d\n",ret);
      if(ret <= 0) { rlSocket::disconnect(); continue; }
      length = ih.length_high*256 + ih.length_low;
      rlDebugPrintf("read buf length=%d\n",length);
      ret = rlSocket::read(buf,length-sizeof(ih),TIMEOUT);
      rlDebugPrintf("read buf ret=%d\n",ret);
      if(ret <= 0) { rlSocket::disconnect(); continue; }
      if(length == 22)
      {
        for(i2=0; i2<3; i2++)
        {
          rlDebugPrintf("write connect_block2\n");
          rlSocket::write(connect_block2,sizeof(connect_block2));
          ret = rlSocket::read(&ih,sizeof(ih),TIMEOUT);
          rlDebugPrintf("read2 ih ret=%d\n",ret);
          length = ih.length_high*256 + ih.length_low;
          rlDebugPrintf("read2 buf length=%d\n",length);
          ret = rlSocket::read(buf,length-sizeof(ih),TIMEOUT);
          rlDebugPrintf("read2 buf ret=%d\n",ret);
          if(ret <= 0) { rlSocket::disconnect(); continue; }
          if(ret > 0) 
          {
            rlDebugPrintf("connect success\n");
            return;
          }  
        }
        rlSocket::disconnect();
        return;
      }
    }
    else
    {
      rlsleep(100);
      rlDebugPrintf("connect failed\n");
    }
  }    
}

int rlSiemensTCP::write(int org, int dbnr, int start_adr, int len, const unsigned char *buf)
{
  int i,ibuf,ret,len_byte,length;
  if(rlSocket::isConnected() == 0) doConnect();
  if(rlSocket::isConnected() == 0) return -1;

  len_byte = len;
  //if(org == ORG_DB) len_byte *= 2;
  //if(org == ORG_Z)  len_byte *= 2;
  //if(org == ORG_T)  len_byte *= 2;
  
  if((plc_type == S5 || plc_type == S7_300 || plc_type == S7_400) && fetch_write == 1)
  {
    rlDebugPrintf("using fetch_write\n");
    length = sizeof(ih) + sizeof(wh) + len_byte;
    ih.version  = 3;
    ih.reserved = 0;
    ih.length_high = length / 256;
    ih.length_low  = length & 0x0ff;
    wh.ident[0]        = 'S';
    wh.ident[1]        = '5';
    wh.header_len      = 16;
    wh.ident_op_code   = 1;
    wh.op_code_len     = 3;
    wh.op_code         = 3;
    wh.ident_org_block = 3;
    wh.len_org_block   = 8;
    wh.org_block       = (unsigned char) org;
    wh.dbnr            = (unsigned char) dbnr;
    wh.start_adr[0]    = (unsigned char) start_adr / 256;
    wh.start_adr[1]    = (unsigned char) start_adr & 0x0ff;;
    wh.len[0]          = (unsigned char) len / 256;
    wh.len[1]          = (unsigned char) len & 0x0ff;;
    wh.spare1          = 0x0ff;
    wh.spare1_len      = 2;
    ret = rlSocket::write(&ih,sizeof(ih));
    rlDebugPrintf("write ih ret=%d\n",ret);
    if(ret < 0) return ret;
    ret = rlSocket::write(&wh,sizeof(wh));
    rlDebugPrintf("write wh ret=%d\n",ret);
    if(ret < 0) return ret;
    ret = rlSocket::write(buf,len_byte);
    rlDebugPrintf("write buf ret=%d\n",ret);
    if(ret < 0) return ret;
    ret = rlSocket::read(&ih,sizeof(ih),TIMEOUT);
    rlDebugPrintf("read ih ret=%d\n",ret);
    if(ret <= 0) return ret;
    ret = rlSocket::read(&wa,sizeof(wa),TIMEOUT);
    rlDebugPrintf("read wa ret=%d\n",ret);
    if(ret <= 0) return ret;
    if(wa.error_block != 0) return -1;
  }
  else // S7_200
  {
    rlDebugPrintf("not using fetch_write\n");
    i = 0;
    pdu[i++] = 0x02;
    pdu[i++] = 0xF0;
    pdu[i++] = 0x80;
    pdu[i++] = 0x32;
    pdu[i++] = 0x01;
    pdu[i++] = 0x00;
    pdu[i++] = 0x00;
    pdu[i++] = 0x00;
    pdu[i++] = 0x00;
    pdu[i++] = 0x00;
    pdu[i++] = 0x0E;
    pdu[i++] = 0x00;
    pdu[i++] = 0x08;
    pdu[i++] = 0x05; //0 write
    pdu[i++] = 0x01; //1
    pdu[i++] = 0x12; //2
    pdu[i++] = 0x0A; //3
    pdu[i++] = 0x10; //4
    pdu[i++] = 0x02; //5
    pdu[i++] = len_byte / 256;   //6 0x00;
    pdu[i++] = len_byte & 0x0ff; //7 0x04;
    pdu[i++] = dbnr / 256;       //8 0x00;
    pdu[i++] = dbnr & 0x0ff;     //9 0x00;
    pdu[i]   = 0x83;             //10 
    if(org == ORG_DB)   pdu[i] = 0x84;      //[10] Datenbaustein
    if(org == ORG_M)    pdu[i] = 0x83;      //[10] Merker
    if(org == ORG_E)    pdu[i] = 0x81;      //[10] Eingang
    if(org == ORG_A)    pdu[i] = 0x82;      //[10] Ausgang
    if(org == ORG_PEPA) pdu[i] = 0x84;      //[10] not tested
    if(org == ORG_Z)    pdu[i] = 0x84;      //[10] not tested
    if(org == ORG_T)    pdu[i] = 29;        //[10] Timer
    i++;
    pdu[i++] =  (start_adr/256)    & 0x0ff; //0x00;  // [11] start adr/bits
    pdu[i++] = ((start_adr*8)/256) & 0x0ff; //0x00;  // [12] start adr/bits
    pdu[i++] =   (start_adr*8)     & 0x0ff; //0x00;  // [13] start adr/bits
    pdu[i++] = 0x00;
    pdu[i++] = 0x04;
    pdu[i++] = 0x00;
    pdu[i++] = 0x20;
    for(ibuf=0; ibuf<len_byte; ibuf++)
    {
      pdu[i++] = buf[ibuf];
      if(i > (int) sizeof(pdu)) return -1;
    }  
    ret = write_iso(pdu,i);
    if(ret < 0) return ret;
    ret = read_iso(pdu);
    if(ret < 0) return ret;    
    if(pdu[15] != 0x05) return -1;
    if(pdu[16] != 0x01) return -1;
  }  

  return len_byte;
}

int rlSiemensTCP::fetch(int org, int dbnr, int start_adr, int len, unsigned char *buf)
{
  int i,ret,len_byte,length;
  
  if(rlSocket::isConnected() == 0) doConnect();
  if(rlSocket::isConnected() == 0) return -1;

  len_byte = len;
  //if(org == ORG_DB) len_byte *= 2;
  //if(org == ORG_Z)  len_byte *= 2;
  //if(org == ORG_T)  len_byte *= 2;
  
  if((plc_type == S5 || plc_type == S7_300 || plc_type == S7_400) && fetch_write == 1)
  {
    length = sizeof(ih) + sizeof(fh);
    ih.version  = 3;
    ih.reserved = 0;
    ih.length_high = length / 256;
    ih.length_low  = length & 0x0ff;
    fh.ident[0]        = 'S';
    fh.ident[1]        = '5';
    fh.header_len      = 16;
    fh.ident_op_code   = 1;
    fh.op_code_len     = 3;
    fh.op_code         = 5;
    fh.ident_org_block = 3;
    fh.len_org_block   = 8;
    fh.org_block       = (unsigned char) org;
    fh.dbnr            = (unsigned char) dbnr;
    fh.start_adr[0]    = (unsigned char) start_adr / 256;
    fh.start_adr[1]    = (unsigned char) start_adr & 0x0ff;;
    fh.len[0]          = (unsigned char) len / 256;
    fh.len[1]          = (unsigned char) len & 0x0ff;;
    fh.spare1          = 0x0ff;
    fh.spare1_len      = 2;
    ret = rlSocket::write(&ih,sizeof(ih));
    rlDebugPrintf("fetch write ih ret=%d\n",ret);
    if(ret < 0) return ret;  
    ret = rlSocket::write(&fh,sizeof(fh));
    rlDebugPrintf("fetch write fh ret=%d\n",ret);
    if(ret < 0) return ret;
    ret = rlSocket::read(&ih,sizeof(ih),TIMEOUT);
    rlDebugPrintf("fetch read ih ret=%d\n",ret);
    if(ret <= 0) return ret;
    ret = rlSocket::read(&fa,sizeof(fa),TIMEOUT);
    rlDebugPrintf("fetch read fa ret=%d\n",ret);
    if(ret <= 0) return ret;
    if(fa.error_block != 0) return -1;
    ret = rlSocket::read(buf,len_byte,TIMEOUT);
    rlDebugPrintf("fetch read buf ret=%d\n",ret);
    if(ret <= 0) return ret;
  }
  else
  {
    i = 0;
    pdu[i++] = 0x02;  // [0]
    pdu[i++] = 0xF0;  // [0]
    pdu[i++] = 0x80;  // [0]
    pdu[i++] = 0x32;  // [0]
    pdu[i++] = 0x01;  // [0]
    pdu[i++] = 0x00;  // [0]
    pdu[i++] = 0x00;  // [0]
    pdu[i++] = 0x00;  // [0]
    pdu[i++] = 0x00;  // [0]
    pdu[i++] = 0x00;  // [0]
    pdu[i++] = 0x0E;  // [0]
    pdu[i++] = 0x00;  // [0]
    pdu[i++] = 0x00;  // [0]
    pdu[i++] = 0x04;  // [0]  read
    pdu[i++] = 0x01;  // [1]
    pdu[i++] = 0x12;  // [2]
    pdu[i++] = 0x0A;  // [3]
    pdu[i++] = 0x10;  // [4]
    pdu[i++] = 0x02;  // [5] 
    pdu[i++] = len_byte / 256;              //0x00;  // [6]  len/bytes
    pdu[i++] = len_byte & 0x0ff;            //0x40;  // [7]  len/bytes
    pdu[i++] = dbnr / 256;                  //0x00;  // [8]  dbnum
    pdu[i++] = dbnr & 0x0ff;                //0x01;  // [9]  dbnum
    pdu[i]   = 0x83;             //10 
    if(org == ORG_DB)   pdu[i] = 0x84;      //[10] Datenbaustein
    if(org == ORG_M)    pdu[i] = 0x83;      //[10] Merker
    if(org == ORG_E)    pdu[i] = 0x81;      //[10] Eingang
    if(org == ORG_A)    pdu[i] = 0x82;      //[10] Ausgang
    if(org == ORG_PEPA) pdu[i] = 0x84;      //[10] not tested
    if(org == ORG_Z)    pdu[i] = 0x84;      //[10] not tested
    if(org == ORG_T)    pdu[i] = 29;        //[10] Timer
    i++;
    pdu[i++] =  (start_adr/256)    & 0x0ff; //0x00;  // [11] start adr/bits
    pdu[i++] = ((start_adr*8)/256) & 0x0ff; //0x00;  // [12] start adr/bits
    pdu[i++] =   (start_adr*8)     & 0x0ff; //0x00;  // [13] start adr/bits
    ret = write_iso(pdu,i);
    if(ret < 0) return ret;
    ret = read_iso(pdu);
    if(ret < 0) return ret;    
    if(pdu[15] != 0x04) return -1;
    if(pdu[16] != 0x01) return -1;
    i = 21;
    if(ret < i+len_byte) return -1;
    for(int ibuf = 0; ibuf < len_byte; ibuf++)
    {
      buf[ibuf] = pdu[i++];
    }  
  }
  
  return len_byte;
}

int rlSiemensTCP::read_iso(unsigned char *buf)
{
  int i,ret,len;
  
  ret = rlSocket::read(&ih,sizeof(ih),TIMEOUT);
  if(ret < 0)                 { rlSocket::disconnect(); return ret; }
  if(ih.version != 3)         { rlSocket::disconnect(); return -1;  }
  len = ih.length_high*256 + ih.length_low - 4;
  if(len <= 0)                { rlSocket::disconnect(); return -1;  }
  if(len > (int) sizeof(pdu)) { rlSocket::disconnect(); return -1;  }        
  ret = rlSocket::read(buf,len,TIMEOUT);
  if(ret < 0)                 { rlSocket::disconnect(); return ret; }
  if(rlDebugPrintfState != 0)
  {
    ::printf("read_iso() len=%d\n", len);
    for(i=0; i<len; i++) ::printf("%02x,",buf[i]);
    ::printf("\n");
  }  
  return len;
}

int rlSiemensTCP::write_iso(unsigned char *buf, int len)
{
  int i,ret;
  
  if(rlSocket::isConnected() == 0) doConnect();
  if(rlSocket::isConnected() == 0) return -1;
  ih.version  = 3;
  ih.reserved = 0;
  ih.length_high = (len+4) / 256;
  ih.length_low  = (len+4) & 0x0ff;
  ret = rlSocket::write(&ih,sizeof(ih));
  if(ret < 0) { rlSocket::disconnect(); return ret; }  
  ret = rlSocket::write(buf,len);
  if(ret < 0) { rlSocket::disconnect(); return ret; }
  if(rlDebugPrintfState != 0)
  {
    ::printf("write_iso() len=%d\n", len);
    for(i=0; i<len; i++) ::printf("%02x,",buf[i]);
    ::printf("\n");
  }  
  return len;  
}
