--------------------------------------------------------------------------------------
-- this file is generated by pvdevelop. DO NOT EDIT !!!
--------------------------------------------------------------------------------------

function showMask1(p)
  ------------------------------------------------------------------------------------
  ID_MAIN_WIDGET = 0
  PushButtonBack = 1
  ID_END_OF_WIDGETS = 2
  ------------------------------------------------------------------------------------
  pv.pvStartDefinition(p,ID_END_OF_WIDGETS)

  pv.pvQPushButton(p,PushButtonBack,0)
  pv.pvSetGeometry(p,PushButtonBack,10,10,111,40)
  pv.pvSetText(p,PushButtonBack,"Lua test")
  pv.pvToolTip(p,PushButtonBack,"back")

  pv.pvEndDefinition(p)
  ------------------------------------------------------------------------------------
  dofile("mask1_slots.lua")
  
  pv.pvClearMessageQueue(p)
  while(1)
  do
    event  = pv.pvGetEvent(p)
    result = pv.pvParseEventStruct(p,event)
    id     = result.event
    i      = result.i
    text   = result.text

    if     id == pv.NULL_EVENT then
        ret = slotNullEvent(p)
        if ret ~= 0 then return ret end 
    elseif id == pv.BUTTON_EVENT then    
        if trace==1 then print("BUTTON_EVENT id=", i) end
        ret = slotButtonEvent(p,i)
        if ret ~= 0 then return ret end 
    elseif id == pv.BUTTON_PRESSED_EVENT then
        print("BUTTON_PRESSED_EVENT")
        --if(trace) printf("BUTTON_PRESSED_EVENT id=%d\n",i);
        --if((ret=slotButtonPressedEvent(p,i,&d)) != 0) return ret;
      --case BUTTON_RELEASED_EVENT:
        --if(trace) printf("BUTTON_RELEASED_EVENT id=%d\n",i);
        --if((ret=slotButtonReleasedEvent(p,i,&d)) != 0) return ret;
      --case TEXT_EVENT:
        --if(trace) printf("TEXT_EVENT id=%d %s\n",i,text);
        --if((ret=slotTextEvent(p,i,&d,text)) != 0) return ret;
      --case SLIDER_EVENT:
        --sscanf(text,"(%d)",&val);
        --if(trace) printf("SLIDER_EVENT val=%d\n",val);
        --if((ret=slotSliderEvent(p,i,&d,val)) != 0) return ret;
      --case CHECKBOX_EVENT:
        --if(trace) printf("CHECKBOX_EVENT id=%d %s\n",i,text);
        --if((ret=slotCheckboxEvent(p,i,&d,text)) != 0) return ret;
      --case RADIOBUTTON_EVENT:
        --if(trace) printf("RADIOBUTTON_EVENT id=%d %s\n",i,text);
        --if((ret=slotRadioButtonEvent(p,i,&d,text)) != 0) return ret;
      --case GL_INITIALIZE_EVENT:
        --if(trace) printf("you have to call initializeGL()\n");
        --if((ret=slotGlInitializeEvent(p,i,&d)) != 0) return ret;
      --case GL_PAINT_EVENT:
        --if(trace) printf("you have to call paintGL()\n");
        --if((ret=slotGlPaintEvent(p,i,&d)) != 0) return ret;
      --case GL_RESIZE_EVENT:
        --sscanf(text,"(%d,%d)",&w,&h);
        --if(trace) printf("you have to call resizeGL(w,h)\n");
        --if((ret=slotGlResizeEvent(p,i,&d,w,h)) != 0) return ret;
      --case GL_IDLE_EVENT:
        --if((ret=slotGlIdleEvent(p,i,&d)) != 0) return ret;
      --case TAB_EVENT:
        --sscanf(text,"(%d)",&val);
        --if(trace) printf("TAB_EVENT(%d,page=%d)\n",i,val);
        --if((ret=slotTabEvent(p,i,&d,val)) != 0) return ret;
      --case TABLE_TEXT_EVENT:
        --sscanf(text,"(%d,%d,",&x,&y);
        --pvGetText(text,str1);
        --if(trace) printf("TABLE_TEXT_EVENT(%d,%d,\"%s\")\n",x,y,str1);
        --if((ret=slotTableTextEvent(p,i,&d,x,y,str1)) != 0) return ret;
      --case TABLE_CLICKED_EVENT:
        --sscanf(text,"(%d,%d,%d)",&x,&y,&button);
        --if(trace) printf("TABLE_CLICKED_EVENT(%d,%d,button=%d)\n",x,y,button);
        --if((ret=slotTableClickedEvent(p,i,&d,x,y,button)) != 0) return ret;
      --case SELECTION_EVENT:
        --sscanf(text,"(%d,",&val);
        --pvGetText(text,str1);
        --if(trace) printf("SELECTION_EVENT(column=%d,\"%s\")\n",val,str1);
        --if((ret=slotSelectionEvent(p,i,&d,val,str1)) != 0) return ret;
      --case CLIPBOARD_EVENT:
        --sscanf(text,"(%d",&val);
        --if(trace) printf("CLIPBOARD_EVENT(id=%d)\n",val);
        --if(trace) printf("clipboard = \n%s\n",p->clipboard);
        --if((ret=slotClipboardEvent(p,i,&d,val)) != 0) return ret;
      --case RIGHT_MOUSE_EVENT:
        --if(trace) printf("RIGHT_MOUSE_EVENT id=%d text=%s\n",i,text);
        --if((ret=slotRightMouseEvent(p,i,&d,text)) != 0) return ret;
      --case KEYBOARD_EVENT:
        --sscanf(text,"(%d",&val);
        --if(trace) printf("KEYBOARD_EVENT modifier=%d key=%d\n",i,val);
        --if((ret=slotKeyboardEvent(p,i,&d,val,i)) != 0) return ret;
      --case PLOT_MOUSE_MOVED_EVENT:
        --sscanf(text,"(%f,%f)",&xval,&yval);
        --if(trace) printf("PLOT_MOUSE_MOVE %f %f\n",xval,yval);
        --if((ret=slotMouseMovedEvent(p,i,&d,xval,yval)) != 0) return ret;
      --case PLOT_MOUSE_PRESSED_EVENT:
        --sscanf(text,"(%f,%f)",&xval,&yval);
        --if(trace) printf("PLOT_MOUSE_PRESSED %f %f\n",xval,yval);
        --if((ret=slotMousePressedEvent(p,i,&d,xval,yval)) != 0) return ret;
      --case PLOT_MOUSE_RELEASED_EVENT:
        --sscanf(text,"(%f,%f)",&xval,&yval);
        --if(trace) printf("PLOT_MOUSE_RELEASED %f %f\n",xval,yval);
        --if((ret=slotMouseReleasedEvent(p,i,&d,xval,yval)) != 0) return ret;
      --case MOUSE_OVER_EVENT:
        --sscanf(text,"%d",&val);
        --if(trace) printf("MOUSE_OVER_EVENT %d\n",val);
        --if((ret=slotMouseOverEvent(p,i,&d,val)) != 0) return ret;
      --case USER_EVENT:
        --if(trace) printf("USER_EVENT id=%d %s\n",i,text);
        --if((ret=slotUserEvent(p,i,&d,text)) != 0) return ret;
      --default:
        --if(trace) printf("UNKNOWN_EVENT id=%d %s\n",i,text);
    end    
  end
  return 0
end

