//***************************************************************************
//                          main.cpp  -  description
//                             -------------------
//  begin            : So. Jan 23 10:25:55 2011
//  generated by     : pvdevelop (C) Lehrig Software Engineering
//  email            : lehrig@t-online.de
//***************************************************************************
#include "pvapp.h"
// Include the Lua API header files
#include <lua.hpp>
#include <lualib.h>
#include <lauxlib.h>

#ifdef __cplusplus
extern "C" {
#endif
extern int luaopen_pv(lua_State* L);    // declare the wrapped module
extern int luaopen_rllib(lua_State* L); // declare the wrapped module
#ifdef __cplusplus
}
#endif

typedef struct
{
  int s;
  lua_State *L;
}CleanData;

CleanData clean_data[MAX_CLIENTS];

static int cleanup(void *ptr)
{
  PARAM *p = (PARAM *) ptr;
  if(trace) printf("cleanup p->s=%d\n", p->s);
  for(int i=0; i<MAX_CLIENTS; i++)
  {
    if(clean_data[i].s == p->s)
    {
      if(trace) printf("cleanup lua_close\n");
      lua_State *L = (lua_State *) clean_data[i].L;
      lua_close(L);
      clean_data[i].s = -1;
      clean_data[i].L = NULL;
      break;
    }
  }
  return 0;
}

int pvMain(PARAM *p)
{
  int i, ret, status;
  lua_State* L;

  // initialize Lua
  if(trace) printf("lua_open\n");
  L = lua_open();
  luaL_openlibs(L);

  // initialize cleanup
  for(i=0; i<MAX_CLIENTS; i++)
  {
    if(clean_data[i].s == -1 && clean_data[i].L == NULL)
    {
      clean_data[i].s = p->s;
      clean_data[i].L = L;
      break;
    }
  }
  pvSetCleanup(p, cleanup, p);

  // load pv and rllib 
  ret = luaopen_pv(L);
  if(trace) printf("luaopen_pv ret=%d\n", ret);
  ret = luaopen_rllib(L);
  if(trace) printf("luaopen_rllib ret=%d\n", ret);

  // load the script
  if(trace) printf("Loading '%s'\n", "main.lua");
  status = luaL_dofile(L, "main.lua");
  if(status)
  {
    printf("Couldn't load file: %s\n", lua_tostring(L, -1));
    pvThreadFatal(p,"Lua terminateing");
  }

  // call luaMain
  lua_getglobal(L, "luaMain");
  lua_pushnumber(L, (long) p);
  status = lua_pcall(L, 1, 1, 0); 
  if(status)
  {
    printf("Exception in running lua: %s\n", lua_tostring(L, -1));
    lua_pop(L, 1);
    pvThreadFatal(p,"Lua terminating");
  }
  pvThreadFatal(p,"Lua terminating");
/*  
  //pvSetCaption(p,"pvslua");
  pvResize(p,0,1280,1024);
  //pvScreenHint(p,1024,768); // this may be used to automatically set the zoomfactor
  ret = 1;
  pvGetInitialMask(p);
  if(strcmp(p->initial_mask,"mask1") == 0) ret = 1;

  while(1)
  {
    if(trace) printf("show_mask%d\n", ret);
    switch(ret)
    {
      case 1:
        pvStatusMessage(p,-1,-1,-1,"mask1");
        ret = show_mask1(p);
        break;
      default:
        return 0;
    }
  }
*/  
  return 0;
}

#ifdef USE_INETD
int main(int ac, char **av)
{
PARAM p;

  pvInit(ac,av,&p);
  /* here you may interpret ac,av and set p->user to your data */
  pvMain(&p);
  return 0;
}
#else  // multi threaded server
int main(int ac, char **av)
{
PARAM p;
int   s;

  IntegerArray ia;
  FloatArray fa;
  getIntegers("hallo123welt456", &ia);
  printf("IntergerArray = %d %d\n", ia.i[0], ia.i[1]);
  getFloats("hallo123.5welt-456.5", &fa);
  printf("FloatArray = %f %f\n", fa.f[0], fa.f[1]);

  trace = 1;
  pvInit(ac,av,&p);
  /* here you may interpret ac,av and set p->user to your data */
  // initialize cleanup
  for(int i=0; i<MAX_CLIENTS; i++)
  {
    clean_data[i].s = -1;
    clean_data[i].L = NULL;
  }
  while(1)
  {
    s = pvAccept(&p);
    if(s != -1) pvCreateThread(&p,s);
    else        break;
  }
  return 0;
}
#endif
