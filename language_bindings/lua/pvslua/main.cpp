//***************************************************************************
//                          main.cpp  -  description
//                             -------------------
//  begin            : So. Jan 23 10:25:55 2011
//  generated by     : pvdevelop (C) Lehrig Software Engineering
//  email            : lehrig@t-online.de
//***************************************************************************
#include "pvapp.h"
// Include the Lua API header files
//#include <luaconf.h>
//#include <lua.h>
#include <lua.hpp>
#include <lualib.h>
#include <lauxlib.h>

// todo: comment me out. you can insert these objects as extern in your masks.
//rlModbusClient     modbus(modbusdaemon_MAILBOX,modbusdaemon_SHARED_MEMORY,modbusdaemon_SHARED_MEMORY_SIZE);
//rlSiemensTCPClient siemensTCP(siemensdaemon_MAILBOX,siemensdaemon_SHARED_MEMORY,siemensdaemon_SHARED_MEMORY_SIZE);
//rlPPIClient        ppi(ppidaemon_MAILBOX,ppidaemon_SHARED_MEMORY,ppidaemon_SHARED_MEMORY_SIZE);

int pvMain(PARAM *p)
{
int ret, status;
lua_State* L;

  // initialize Lua
  printf("step1\n");
  L = lua_open();

  /// load various Lua libraries
  luaL_openlibs(L);
  //luaopen_base(L);
  //luaopen_table(L);
  //panic luaopen_io(L);
  //luaopen_string(L);
  //luaopen_math(L);

  // run the script
  //luaL_dofile(L,"main.lua");
  printf("Loading '%s'\n", "main.lua");
  status = luaL_loadfile(L, "main.lua");
  if(status)
  {
    printf("Couldn't load file: %s\n", lua_tostring(L, -1));
    pvThreadFatal(p,"Lua terminateing");
  }
  lua_pushnumber(L, 7);
  status = lua_pcall(L, 1, 1, 0); 
  if(status)
  {
    printf("Exception in running lua: %s\n", lua_tostring(L, -1));
    lua_pop(L, 1);
    pvThreadFatal(p,"Lua terminateing");
  }
  lua_pop(L, 1);

  // cleanup Lua
  printf("step9\n");
  lua_close(L);
  printf("step10\n");

  pvSetCaption(p,"pvslua");
  pvResize(p,0,1280,1024);
  //pvScreenHint(p,1024,768); // this may be used to automatically set the zoomfactor
  ret = 1;
  pvGetInitialMask(p);
  if(strcmp(p->initial_mask,"mask1") == 0) ret = 1;

  while(1)
  {
    if(trace) printf("show_mask%d\n", ret);
    switch(ret)
    {
      case 1:
        pvStatusMessage(p,-1,-1,-1,"mask1");
        ret = show_mask1(p);
        break;
      default:
        return 0;
    }
  }
}

#ifdef USE_INETD
int main(int ac, char **av)
{
PARAM p;

  pvInit(ac,av,&p);
  /* here you may interpret ac,av and set p->user to your data */
  pvMain(&p);
  return 0;
}
#else  // multi threaded server
int main(int ac, char **av)
{
PARAM p;
int   s;

  pvInit(ac,av,&p);
  /* here you may interpret ac,av and set p->user to your data */
  while(1)
  {
    s = pvAccept(&p);
    if(s != -1) pvCreateThread(&p,s);
    else        break;
  }
  return 0;
}
#endif
