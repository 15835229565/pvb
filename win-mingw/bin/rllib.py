# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _rllib
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class rlSpawn(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlSpawn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlSpawn, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlSpawn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlSpawn
    __del__ = lambda self : None;
    def spawn(*args): return _rllib.rlSpawn_spawn(*args)
    def readLine(*args): return _rllib.rlSpawn_readLine(*args)
    def getchar(*args): return _rllib.rlSpawn_getchar(*args)
    def select(*args): return _rllib.rlSpawn_select(*args)
    def writeString(*args): return _rllib.rlSpawn_writeString(*args)
    def write(*args): return _rllib.rlSpawn_write(*args)
    def printf(*args): return _rllib.rlSpawn_printf(*args)
    def printAll(*args): return _rllib.rlSpawn_printAll(*args)
    __swig_setmethods__["pid"] = _rllib.rlSpawn_pid_set
    __swig_getmethods__["pid"] = _rllib.rlSpawn_pid_get
    if _newclass:pid = _swig_property(_rllib.rlSpawn_pid_get, _rllib.rlSpawn_pid_set)
rlSpawn_swigregister = _rllib.rlSpawn_swigregister
rlSpawn_swigregister(rlSpawn)

class SCHED_PARAM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCHED_PARAM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCHED_PARAM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sched_priority"] = _rllib.SCHED_PARAM_sched_priority_set
    __swig_getmethods__["sched_priority"] = _rllib.SCHED_PARAM_sched_priority_get
    if _newclass:sched_priority = _swig_property(_rllib.SCHED_PARAM_sched_priority_get, _rllib.SCHED_PARAM_sched_priority_set)
    def __init__(self, *args): 
        this = _rllib.new_SCHED_PARAM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_SCHED_PARAM
    __del__ = lambda self : None;
SCHED_PARAM_swigregister = _rllib.SCHED_PARAM_swigregister
SCHED_PARAM_swigregister(SCHED_PARAM)

class pthread_attr_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pthread_attr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pthread_attr_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["__detachstate"] = _rllib.pthread_attr_t___detachstate_set
    __swig_getmethods__["__detachstate"] = _rllib.pthread_attr_t___detachstate_get
    if _newclass:__detachstate = _swig_property(_rllib.pthread_attr_t___detachstate_get, _rllib.pthread_attr_t___detachstate_set)
    __swig_setmethods__["__schedpolicy"] = _rllib.pthread_attr_t___schedpolicy_set
    __swig_getmethods__["__schedpolicy"] = _rllib.pthread_attr_t___schedpolicy_get
    if _newclass:__schedpolicy = _swig_property(_rllib.pthread_attr_t___schedpolicy_get, _rllib.pthread_attr_t___schedpolicy_set)
    __swig_setmethods__["__schedparam"] = _rllib.pthread_attr_t___schedparam_set
    __swig_getmethods__["__schedparam"] = _rllib.pthread_attr_t___schedparam_get
    if _newclass:__schedparam = _swig_property(_rllib.pthread_attr_t___schedparam_get, _rllib.pthread_attr_t___schedparam_set)
    __swig_setmethods__["__inheritsched"] = _rllib.pthread_attr_t___inheritsched_set
    __swig_getmethods__["__inheritsched"] = _rllib.pthread_attr_t___inheritsched_get
    if _newclass:__inheritsched = _swig_property(_rllib.pthread_attr_t___inheritsched_get, _rllib.pthread_attr_t___inheritsched_set)
    __swig_setmethods__["__scope"] = _rllib.pthread_attr_t___scope_set
    __swig_getmethods__["__scope"] = _rllib.pthread_attr_t___scope_get
    if _newclass:__scope = _swig_property(_rllib.pthread_attr_t___scope_get, _rllib.pthread_attr_t___scope_set)
    __swig_setmethods__["__guardsize"] = _rllib.pthread_attr_t___guardsize_set
    __swig_getmethods__["__guardsize"] = _rllib.pthread_attr_t___guardsize_get
    if _newclass:__guardsize = _swig_property(_rllib.pthread_attr_t___guardsize_get, _rllib.pthread_attr_t___guardsize_set)
    __swig_setmethods__["__stackaddr_set"] = _rllib.pthread_attr_t___stackaddr_set_set
    __swig_getmethods__["__stackaddr_set"] = _rllib.pthread_attr_t___stackaddr_set_get
    if _newclass:__stackaddr_set = _swig_property(_rllib.pthread_attr_t___stackaddr_set_get, _rllib.pthread_attr_t___stackaddr_set_set)
    __swig_setmethods__["__stackaddr"] = _rllib.pthread_attr_t___stackaddr_set
    __swig_getmethods__["__stackaddr"] = _rllib.pthread_attr_t___stackaddr_get
    if _newclass:__stackaddr = _swig_property(_rllib.pthread_attr_t___stackaddr_get, _rllib.pthread_attr_t___stackaddr_set)
    __swig_setmethods__["__stacksize"] = _rllib.pthread_attr_t___stacksize_set
    __swig_getmethods__["__stacksize"] = _rllib.pthread_attr_t___stacksize_get
    if _newclass:__stacksize = _swig_property(_rllib.pthread_attr_t___stacksize_get, _rllib.pthread_attr_t___stacksize_set)
    def __init__(self, *args): 
        this = _rllib.new_pthread_attr_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_pthread_attr_t
    __del__ = lambda self : None;
pthread_attr_t_swigregister = _rllib.pthread_attr_t_swigregister
pthread_attr_t_swigregister(pthread_attr_t)

class WSEMAPHORE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WSEMAPHORE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WSEMAPHORE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cmax"] = _rllib.WSEMAPHORE_cmax_set
    __swig_getmethods__["cmax"] = _rllib.WSEMAPHORE_cmax_get
    if _newclass:cmax = _swig_property(_rllib.WSEMAPHORE_cmax_get, _rllib.WSEMAPHORE_cmax_set)
    __swig_setmethods__["hSemaphore"] = _rllib.WSEMAPHORE_hSemaphore_set
    __swig_getmethods__["hSemaphore"] = _rllib.WSEMAPHORE_hSemaphore_get
    if _newclass:hSemaphore = _swig_property(_rllib.WSEMAPHORE_hSemaphore_get, _rllib.WSEMAPHORE_hSemaphore_set)
    def __init__(self, *args): 
        this = _rllib.new_WSEMAPHORE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_WSEMAPHORE
    __del__ = lambda self : None;
WSEMAPHORE_swigregister = _rllib.WSEMAPHORE_swigregister
WSEMAPHORE_swigregister(WSEMAPHORE)

rlwthread_attr_init = _rllib.rlwthread_attr_init
rlwthread_create = _rllib.rlwthread_create
rlwthread_close_handle = _rllib.rlwthread_close_handle
rlwthread_exit = _rllib.rlwthread_exit
rlwthread_join = _rllib.rlwthread_join
rlwthread_mutex_init = _rllib.rlwthread_mutex_init
rlwthread_mutex_destroy = _rllib.rlwthread_mutex_destroy
rlwthread_mutex_lock = _rllib.rlwthread_mutex_lock
rlwthread_mutex_trylock = _rllib.rlwthread_mutex_trylock
rlwthread_mutex_unlock = _rllib.rlwthread_mutex_unlock
rlwthread_cancel = _rllib.rlwthread_cancel
rlwrapinit_semaphore = _rllib.rlwrapinit_semaphore
rlwrapdestroy_semaphore = _rllib.rlwrapdestroy_semaphore
rlwrapincrement_semaphore = _rllib.rlwrapincrement_semaphore
rlwrapwait_semaphore = _rllib.rlwrapwait_semaphore
rlwthread_sleep = _rllib.rlwthread_sleep
rlsleep = _rllib.rlsleep
class THREAD_PARAM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THREAD_PARAM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THREAD_PARAM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["thread"] = _rllib.THREAD_PARAM_thread_set
    __swig_getmethods__["thread"] = _rllib.THREAD_PARAM_thread_get
    if _newclass:thread = _swig_property(_rllib.THREAD_PARAM_thread_get, _rllib.THREAD_PARAM_thread_set)
    __swig_setmethods__["user"] = _rllib.THREAD_PARAM_user_set
    __swig_getmethods__["user"] = _rllib.THREAD_PARAM_user_get
    if _newclass:user = _swig_property(_rllib.THREAD_PARAM_user_get, _rllib.THREAD_PARAM_user_set)
    __swig_setmethods__["running"] = _rllib.THREAD_PARAM_running_set
    __swig_getmethods__["running"] = _rllib.THREAD_PARAM_running_get
    if _newclass:running = _swig_property(_rllib.THREAD_PARAM_running_get, _rllib.THREAD_PARAM_running_set)
    def __init__(self, *args): 
        this = _rllib.new_THREAD_PARAM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_THREAD_PARAM
    __del__ = lambda self : None;
THREAD_PARAM_swigregister = _rllib.THREAD_PARAM_swigregister
THREAD_PARAM_swigregister(THREAD_PARAM)

class rlThread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlThread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlThread, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlThread(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlThread
    __del__ = lambda self : None;
    def create(*args): return _rllib.rlThread_create(*args)
    def trylock(*args): return _rllib.rlThread_trylock(*args)
    def lock(*args): return _rllib.rlThread_lock(*args)
    def unlock(*args): return _rllib.rlThread_unlock(*args)
    def waitSemaphore(*args): return _rllib.rlThread_waitSemaphore(*args)
    def incrementSemaphore(*args): return _rllib.rlThread_incrementSemaphore(*args)
    def join(*args): return _rllib.rlThread_join(*args)
    def cancel(*args): return _rllib.rlThread_cancel(*args)
    def threadExit(*args): return _rllib.rlThread_threadExit(*args)
    __swig_setmethods__["tid"] = _rllib.rlThread_tid_set
    __swig_getmethods__["tid"] = _rllib.rlThread_tid_get
    if _newclass:tid = _swig_property(_rllib.rlThread_tid_get, _rllib.rlThread_tid_set)
    __swig_setmethods__["attr"] = _rllib.rlThread_attr_set
    __swig_getmethods__["attr"] = _rllib.rlThread_attr_get
    if _newclass:attr = _swig_property(_rllib.rlThread_attr_get, _rllib.rlThread_attr_set)
    __swig_setmethods__["mutex"] = _rllib.rlThread_mutex_set
    __swig_getmethods__["mutex"] = _rllib.rlThread_mutex_get
    if _newclass:mutex = _swig_property(_rllib.rlThread_mutex_get, _rllib.rlThread_mutex_set)
    __swig_setmethods__["semaphore"] = _rllib.rlThread_semaphore_set
    __swig_getmethods__["semaphore"] = _rllib.rlThread_semaphore_get
    if _newclass:semaphore = _swig_property(_rllib.rlThread_semaphore_get, _rllib.rlThread_semaphore_set)
rlThread_swigregister = _rllib.rlThread_swigregister
rlThread_swigregister(rlThread)

class rlMutex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlMutex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlMutex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlMutex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlMutex
    __del__ = lambda self : None;
    def trylock(*args): return _rllib.rlMutex_trylock(*args)
    def lock(*args): return _rllib.rlMutex_lock(*args)
    def unlock(*args): return _rllib.rlMutex_unlock(*args)
    __swig_setmethods__["mutex"] = _rllib.rlMutex_mutex_set
    __swig_getmethods__["mutex"] = _rllib.rlMutex_mutex_get
    if _newclass:mutex = _swig_property(_rllib.rlMutex_mutex_get, _rllib.rlMutex_mutex_set)
rlMutex_swigregister = _rllib.rlMutex_swigregister
rlMutex_swigregister(rlMutex)

class rlSemaphore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlSemaphore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlSemaphore, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlSemaphore(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlSemaphore
    __del__ = lambda self : None;
    def waitSemaphore(*args): return _rllib.rlSemaphore_waitSemaphore(*args)
    def incrementSemaphore(*args): return _rllib.rlSemaphore_incrementSemaphore(*args)
    __swig_setmethods__["semaphore"] = _rllib.rlSemaphore_semaphore_set
    __swig_getmethods__["semaphore"] = _rllib.rlSemaphore_semaphore_get
    if _newclass:semaphore = _swig_property(_rllib.rlSemaphore_semaphore_get, _rllib.rlSemaphore_semaphore_set)
rlSemaphore_swigregister = _rllib.rlSemaphore_swigregister
rlSemaphore_swigregister(rlSemaphore)

rlwsa = _rllib.rlwsa
class rlSocket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlSocket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlSocket, name)
    __repr__ = _swig_repr
    SOCKET_ERR = _rllib.rlSocket_SOCKET_ERR
    SETSOCKOPT_ERR = _rllib.rlSocket_SETSOCKOPT_ERR
    LISTEN_ERR = _rllib.rlSocket_LISTEN_ERR
    ACCEPT_ERR = _rllib.rlSocket_ACCEPT_ERR
    INET_ADDR_ERR = _rllib.rlSocket_INET_ADDR_ERR
    CONNECT_ERR = _rllib.rlSocket_CONNECT_ERR
    PORT_ERR = _rllib.rlSocket_PORT_ERR
    def __init__(self, *args): 
        this = _rllib.new_rlSocket(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlSocket
    __del__ = lambda self : None;
    def setAdr(*args): return _rllib.rlSocket_setAdr(*args)
    def setPort(*args): return _rllib.rlSocket_setPort(*args)
    def getPort(*args): return _rllib.rlSocket_getPort(*args)
    def setActive(*args): return _rllib.rlSocket_setActive(*args)
    def read(*args): return _rllib.rlSocket_read(*args)
    def readStr(*args): return _rllib.rlSocket_readStr(*args)
    def write(*args): return _rllib.rlSocket_write(*args)
    def printf(*args): return _rllib.rlSocket_printf(*args)
    def connect(*args): return _rllib.rlSocket_connect(*args)
    def disconnect(*args): return _rllib.rlSocket_disconnect(*args)
    def select(*args): return _rllib.rlSocket_select(*args)
    def isConnected(*args): return _rllib.rlSocket_isConnected(*args)
    def setIPVersion(*args): return _rllib.rlSocket_setIPVersion(*args)
    def getIPVersion(*args): return _rllib.rlSocket_getIPVersion(*args)
    def sendProcessViewBrowserButtonEvent(*args): return _rllib.rlSocket_sendProcessViewBrowserButtonEvent(*args)
    __swig_setmethods__["s"] = _rllib.rlSocket_s_set
    __swig_getmethods__["s"] = _rllib.rlSocket_s_get
    if _newclass:s = _swig_property(_rllib.rlSocket_s_get, _rllib.rlSocket_s_set)
    __swig_setmethods__["sockaddr"] = _rllib.rlSocket_sockaddr_set
    __swig_getmethods__["sockaddr"] = _rllib.rlSocket_sockaddr_get
    if _newclass:sockaddr = _swig_property(_rllib.rlSocket_sockaddr_get, _rllib.rlSocket_sockaddr_set)
rlSocket_swigregister = _rllib.rlSocket_swigregister
rlSocket_swigregister(rlSocket)

class rlTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlTime, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlTime
    __del__ = lambda self : None;
    def getTimeString(*args): return _rllib.rlTime_getTimeString(*args)
    def getLocalTime(*args): return _rllib.rlTime_getLocalTime(*args)
    def getFileModificationTime(*args): return _rllib.rlTime_getFileModificationTime(*args)
    def setTimeFromString(*args): return _rllib.rlTime_setTimeFromString(*args)
    def setLocalTime(*args): return _rllib.rlTime_setLocalTime(*args)
    def secondsSinceEpoche(*args): return _rllib.rlTime_secondsSinceEpoche(*args)
    def __iadd__(*args): return _rllib.rlTime___iadd__(*args)
    def __isub__(*args): return _rllib.rlTime___isub__(*args)
    def __add__(*args): return _rllib.rlTime___add__(*args)
    def __sub__(*args): return _rllib.rlTime___sub__(*args)
    def __eq__(*args): return _rllib.rlTime___eq__(*args)
    def __lt__(*args): return _rllib.rlTime___lt__(*args)
    def __le__(*args): return _rllib.rlTime___le__(*args)
    def __gt__(*args): return _rllib.rlTime___gt__(*args)
    def __ge__(*args): return _rllib.rlTime___ge__(*args)
    __swig_setmethods__["year"] = _rllib.rlTime_year_set
    __swig_getmethods__["year"] = _rllib.rlTime_year_get
    if _newclass:year = _swig_property(_rllib.rlTime_year_get, _rllib.rlTime_year_set)
    __swig_setmethods__["month"] = _rllib.rlTime_month_set
    __swig_getmethods__["month"] = _rllib.rlTime_month_get
    if _newclass:month = _swig_property(_rllib.rlTime_month_get, _rllib.rlTime_month_set)
    __swig_setmethods__["day"] = _rllib.rlTime_day_set
    __swig_getmethods__["day"] = _rllib.rlTime_day_get
    if _newclass:day = _swig_property(_rllib.rlTime_day_get, _rllib.rlTime_day_set)
    __swig_setmethods__["hour"] = _rllib.rlTime_hour_set
    __swig_getmethods__["hour"] = _rllib.rlTime_hour_get
    if _newclass:hour = _swig_property(_rllib.rlTime_hour_get, _rllib.rlTime_hour_set)
    __swig_setmethods__["minute"] = _rllib.rlTime_minute_set
    __swig_getmethods__["minute"] = _rllib.rlTime_minute_get
    if _newclass:minute = _swig_property(_rllib.rlTime_minute_get, _rllib.rlTime_minute_set)
    __swig_setmethods__["second"] = _rllib.rlTime_second_set
    __swig_getmethods__["second"] = _rllib.rlTime_second_get
    if _newclass:second = _swig_property(_rllib.rlTime_second_get, _rllib.rlTime_second_set)
    __swig_setmethods__["millisecond"] = _rllib.rlTime_millisecond_set
    __swig_getmethods__["millisecond"] = _rllib.rlTime_millisecond_get
    if _newclass:millisecond = _swig_property(_rllib.rlTime_millisecond_get, _rllib.rlTime_millisecond_set)
rlTime_swigregister = _rllib.rlTime_swigregister
rlTime_swigregister(rlTime)

class rlMailbox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlMailbox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlMailbox, name)
    __repr__ = _swig_repr
    MAILBOX_ERROR = _rllib.rlMailbox_MAILBOX_ERROR
    MAILBOX_FULL = _rllib.rlMailbox_MAILBOX_FULL
    WAIT = _rllib.rlMailbox_WAIT
    NOWAIT = _rllib.rlMailbox_NOWAIT
    MAX_MAILBOX = _rllib.rlMailbox_MAX_MAILBOX
    OK = _rllib.rlMailbox_OK
    COULD_NOT_CREATE_MAILBOX = _rllib.rlMailbox_COULD_NOT_CREATE_MAILBOX
    COULD_NOT_GET_KEY = _rllib.rlMailbox_COULD_NOT_GET_KEY
    COULD_NOT_GET_CHAN_ID = _rllib.rlMailbox_COULD_NOT_GET_CHAN_ID
    def __init__(self, *args): 
        this = _rllib.new_rlMailbox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlMailbox
    __del__ = lambda self : None;
    def write(*args): return _rllib.rlMailbox_write(*args)
    def printf(*args): return _rllib.rlMailbox_printf(*args)
    def read(*args): return _rllib.rlMailbox_read(*args)
    def clear(*args): return _rllib.rlMailbox_clear(*args)
    __swig_setmethods__["status"] = _rllib.rlMailbox_status_set
    __swig_getmethods__["status"] = _rllib.rlMailbox_status_get
    if _newclass:status = _swig_property(_rllib.rlMailbox_status_get, _rllib.rlMailbox_status_set)
    __swig_setmethods__["name"] = _rllib.rlMailbox_name_set
    __swig_getmethods__["name"] = _rllib.rlMailbox_name_get
    if _newclass:name = _swig_property(_rllib.rlMailbox_name_get, _rllib.rlMailbox_name_set)
rlMailbox_swigregister = _rllib.rlMailbox_swigregister
rlMailbox_swigregister(rlMailbox)

class rlFifo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlFifo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlFifo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlFifo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlFifo
    __del__ = lambda self : None;
    DATA_AVAILABLE = _rllib.rlFifo_DATA_AVAILABLE
    NO_DATA_AVAILABLE = _rllib.rlFifo_NO_DATA_AVAILABLE
    MESSAGE_TO_BIG = _rllib.rlFifo_MESSAGE_TO_BIG
    FIFO_FULL = _rllib.rlFifo_FIFO_FULL
    def read(*args): return _rllib.rlFifo_read(*args)
    def poll(*args): return _rllib.rlFifo_poll(*args)
    def write(*args): return _rllib.rlFifo_write(*args)
    def printf(*args): return _rllib.rlFifo_printf(*args)
rlFifo_swigregister = _rllib.rlFifo_swigregister
rlFifo_swigregister(rlFifo)

class rlSharedMemory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlSharedMemory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlSharedMemory, name)
    __repr__ = _swig_repr
    OK = _rllib.rlSharedMemory_OK
    ERROR_FILE = _rllib.rlSharedMemory_ERROR_FILE
    ERROR_SHMGET = _rllib.rlSharedMemory_ERROR_SHMGET
    ERROR_SHMAT = _rllib.rlSharedMemory_ERROR_SHMAT
    ERROR_SHMCTL = _rllib.rlSharedMemory_ERROR_SHMCTL
    def __init__(self, *args): 
        this = _rllib.new_rlSharedMemory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlSharedMemory
    __del__ = lambda self : None;
    def deleteSharedMemory(*args): return _rllib.rlSharedMemory_deleteSharedMemory(*args)
    def write(*args): return _rllib.rlSharedMemory_write(*args)
    def read(*args): return _rllib.rlSharedMemory_read(*args)
    def readInt(*args): return _rllib.rlSharedMemory_readInt(*args)
    def readShort(*args): return _rllib.rlSharedMemory_readShort(*args)
    def readByte(*args): return _rllib.rlSharedMemory_readByte(*args)
    def readFloat(*args): return _rllib.rlSharedMemory_readFloat(*args)
    def writeInt(*args): return _rllib.rlSharedMemory_writeInt(*args)
    def writeShort(*args): return _rllib.rlSharedMemory_writeShort(*args)
    def writeByte(*args): return _rllib.rlSharedMemory_writeByte(*args)
    def writeFloat(*args): return _rllib.rlSharedMemory_writeFloat(*args)
    def getUserAdr(*args): return _rllib.rlSharedMemory_getUserAdr(*args)
    __swig_setmethods__["status"] = _rllib.rlSharedMemory_status_set
    __swig_getmethods__["status"] = _rllib.rlSharedMemory_status_get
    if _newclass:status = _swig_property(_rllib.rlSharedMemory_status_get, _rllib.rlSharedMemory_status_set)
    __swig_setmethods__["name"] = _rllib.rlSharedMemory_name_set
    __swig_getmethods__["name"] = _rllib.rlSharedMemory_name_get
    if _newclass:name = _swig_property(_rllib.rlSharedMemory_name_get, _rllib.rlSharedMemory_name_set)
rlSharedMemory_swigregister = _rllib.rlSharedMemory_swigregister
rlSharedMemory_swigregister(rlSharedMemory)

class rlSpreadsheetCell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlSpreadsheetCell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlSpreadsheetCell, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlSpreadsheetCell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlSpreadsheetCell
    __del__ = lambda self : None;
    def text(*args): return _rllib.rlSpreadsheetCell_text(*args)
    def setText(*args): return _rllib.rlSpreadsheetCell_setText(*args)
    def printf(*args): return _rllib.rlSpreadsheetCell_printf(*args)
    def clear(*args): return _rllib.rlSpreadsheetCell_clear(*args)
    def setNextCell(*args): return _rllib.rlSpreadsheetCell_setNextCell(*args)
    def getNextCell(*args): return _rllib.rlSpreadsheetCell_getNextCell(*args)
    def exists(*args): return _rllib.rlSpreadsheetCell_exists(*args)
rlSpreadsheetCell_swigregister = _rllib.rlSpreadsheetCell_swigregister
rlSpreadsheetCell_swigregister(rlSpreadsheetCell)

class rlSpreadsheetRow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlSpreadsheetRow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlSpreadsheetRow, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlSpreadsheetRow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlSpreadsheetRow
    __del__ = lambda self : None;
    def text(*args): return _rllib.rlSpreadsheetRow_text(*args)
    def setText(*args): return _rllib.rlSpreadsheetRow_setText(*args)
    def printf(*args): return _rllib.rlSpreadsheetRow_printf(*args)
    def clear(*args): return _rllib.rlSpreadsheetRow_clear(*args)
    def setNextRow(*args): return _rllib.rlSpreadsheetRow_setNextRow(*args)
    def getNextRow(*args): return _rllib.rlSpreadsheetRow_getNextRow(*args)
    def getFirstCell(*args): return _rllib.rlSpreadsheetRow_getFirstCell(*args)
    def readRow(*args): return _rllib.rlSpreadsheetRow_readRow(*args)
    def writeRow(*args): return _rllib.rlSpreadsheetRow_writeRow(*args)
    def exists(*args): return _rllib.rlSpreadsheetRow_exists(*args)
rlSpreadsheetRow_swigregister = _rllib.rlSpreadsheetRow_swigregister
rlSpreadsheetRow_swigregister(rlSpreadsheetRow)

class rlSpreadsheetTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlSpreadsheetTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlSpreadsheetTable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlSpreadsheetTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlSpreadsheetTable
    __del__ = lambda self : None;
    def text(*args): return _rllib.rlSpreadsheetTable_text(*args)
    def setText(*args): return _rllib.rlSpreadsheetTable_setText(*args)
    def printf(*args): return _rllib.rlSpreadsheetTable_printf(*args)
    def clear(*args): return _rllib.rlSpreadsheetTable_clear(*args)
    def read(*args): return _rllib.rlSpreadsheetTable_read(*args)
    def write(*args): return _rllib.rlSpreadsheetTable_write(*args)
    def setNextTable(*args): return _rllib.rlSpreadsheetTable_setNextTable(*args)
    def getNextTable(*args): return _rllib.rlSpreadsheetTable_getNextTable(*args)
    def getFirstRow(*args): return _rllib.rlSpreadsheetTable_getFirstRow(*args)
    def exists(*args): return _rllib.rlSpreadsheetTable_exists(*args)
rlSpreadsheetTable_swigregister = _rllib.rlSpreadsheetTable_swigregister
rlSpreadsheetTable_swigregister(rlSpreadsheetTable)

class rlSpreadsheetWorkbook(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlSpreadsheetWorkbook, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlSpreadsheetWorkbook, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlSpreadsheetWorkbook(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlSpreadsheetWorkbook
    __del__ = lambda self : None;
    def text(*args): return _rllib.rlSpreadsheetWorkbook_text(*args)
    def setText(*args): return _rllib.rlSpreadsheetWorkbook_setText(*args)
    def printf(*args): return _rllib.rlSpreadsheetWorkbook_printf(*args)
    def clear(*args): return _rllib.rlSpreadsheetWorkbook_clear(*args)
    def read(*args): return _rllib.rlSpreadsheetWorkbook_read(*args)
    def write(*args): return _rllib.rlSpreadsheetWorkbook_write(*args)
    def exists(*args): return _rllib.rlSpreadsheetWorkbook_exists(*args)
    def getFirstTable(*args): return _rllib.rlSpreadsheetWorkbook_getFirstTable(*args)
rlSpreadsheetWorkbook_swigregister = _rllib.rlSpreadsheetWorkbook_swigregister
rlSpreadsheetWorkbook_swigregister(rlSpreadsheetWorkbook)

class rlIniFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlIniFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlIniFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlIniFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlIniFile
    __del__ = lambda self : None;
    def read(*args): return _rllib.rlIniFile_read(*args)
    def write(*args): return _rllib.rlIniFile_write(*args)
    def filename(*args): return _rllib.rlIniFile_filename(*args)
    def text(*args): return _rllib.rlIniFile_text(*args)
    def setText(*args): return _rllib.rlIniFile_setText(*args)
    def printf(*args): return _rllib.rlIniFile_printf(*args)
    def remove(*args): return _rllib.rlIniFile_remove(*args)
    def firstSection(*args): return _rllib.rlIniFile_firstSection(*args)
    def nextSection(*args): return _rllib.rlIniFile_nextSection(*args)
    def firstName(*args): return _rllib.rlIniFile_firstName(*args)
    def nextName(*args): return _rllib.rlIniFile_nextName(*args)
    def setDefaultSection(*args): return _rllib.rlIniFile_setDefaultSection(*args)
    def defaultSection(*args): return _rllib.rlIniFile_defaultSection(*args)
    def i18n(*args): return _rllib.rlIniFile_i18n(*args)
rlIniFile_swigregister = _rllib.rlIniFile_swigregister
rlIniFile_swigregister(rlIniFile)

class rlInterpreter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlInterpreter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlInterpreter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlInterpreter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlInterpreter
    __del__ = lambda self : None;
    __swig_setmethods__["line"] = _rllib.rlInterpreter_line_set
    __swig_getmethods__["line"] = _rllib.rlInterpreter_line_get
    if _newclass:line = _swig_property(_rllib.rlInterpreter_line_get, _rllib.rlInterpreter_line_set)
    def isCommand(*args): return _rllib.rlInterpreter_isCommand(*args)
    def copyStringParam(*args): return _rllib.rlInterpreter_copyStringParam(*args)
    def maxchar(*args): return _rllib.rlInterpreter_maxchar(*args)
rlInterpreter_swigregister = _rllib.rlInterpreter_swigregister
rlInterpreter_swigregister(rlInterpreter)

class rlPcontrol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlPcontrol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlPcontrol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlPcontrol(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlPcontrol
    __del__ = lambda self : None;
    def setStartupCommand(*args): return _rllib.rlPcontrol_setStartupCommand(*args)
    def start(*args): return _rllib.rlPcontrol_start(*args)
    def sigterm(*args): return _rllib.rlPcontrol_sigterm(*args)
    def sigkill(*args): return _rllib.rlPcontrol_sigkill(*args)
    def isAlive(*args): return _rllib.rlPcontrol_isAlive(*args)
    def startupCommand(*args): return _rllib.rlPcontrol_startupCommand(*args)
    def processName(*args): return _rllib.rlPcontrol_processName(*args)
    def processTime(*args): return _rllib.rlPcontrol_processTime(*args)
    def setPID(*args): return _rllib.rlPcontrol_setPID(*args)
    def pid(*args): return _rllib.rlPcontrol_pid(*args)
    def getNext(*args): return _rllib.rlPcontrol_getNext(*args)
    def addNew(*args): return _rllib.rlPcontrol_addNew(*args)
    def setPriority(*args): return _rllib.rlPcontrol_setPriority(*args)
    def priority(*args): return _rllib.rlPcontrol_priority(*args)
rlPcontrol_swigregister = _rllib.rlPcontrol_swigregister
rlPcontrol_swigregister(rlPcontrol)

rlSetDebugPrintf = _rllib.rlSetDebugPrintf
rlDebugPrintf = _rllib.rlDebugPrintf
rlLastLinePrintf = _rllib.rlLastLinePrintf
rlpass = _rllib.rlpass
rlstrncpy = _rllib.rlstrncpy
rlsnprintf = _rllib.rlsnprintf
rlSetSigtermHandler = _rllib.rlSetSigtermHandler
rlFindFile = _rllib.rlFindFile
rlGetInifile = _rllib.rlGetInifile
rlSwapShort = _rllib.rlSwapShort
rlEib1 = _rllib.rlEib1
rlEib2 = _rllib.rlEib2
rlLon1 = _rllib.rlLon1
rlLon2 = _rllib.rlLon2
rlProfibus1 = _rllib.rlProfibus1
rlProfibus2 = _rllib.rlProfibus2
rlCan1 = _rllib.rlCan1
rlCan2 = _rllib.rlCan2
rlBrowser = _rllib.rlBrowser
rlsystem = _rllib.rlsystem
rlOption = _rllib.rlOption
rlIntOption = _rllib.rlIntOption
rlFloatOption = _rllib.rlFloatOption
rlTextOption = _rllib.rlTextOption
rlCopyTextfile = _rllib.rlCopyTextfile
rlupper = _rllib.rlupper
rllower = _rllib.rllower
rlStartsWith = _rllib.rlStartsWith
rl_PRINTF_LENGTH = _rllib.rl_PRINTF_LENGTH
rl_PRINTF_LENGTH_SPREADSHEET = _rllib.rl_PRINTF_LENGTH_SPREADSHEET
BIT0 = _rllib.BIT0
BIT1 = _rllib.BIT1
BIT2 = _rllib.BIT2
BIT3 = _rllib.BIT3
BIT4 = _rllib.BIT4
BIT5 = _rllib.BIT5
BIT6 = _rllib.BIT6
BIT7 = _rllib.BIT7
BIT8 = _rllib.BIT8
BIT9 = _rllib.BIT9
BIT10 = _rllib.BIT10
BIT11 = _rllib.BIT11
BIT12 = _rllib.BIT12
BIT13 = _rllib.BIT13
BIT14 = _rllib.BIT14
BIT15 = _rllib.BIT15
BIT16 = _rllib.BIT16
BIT17 = _rllib.BIT17
BIT18 = _rllib.BIT18
BIT19 = _rllib.BIT19
BIT20 = _rllib.BIT20
BIT21 = _rllib.BIT21
BIT22 = _rllib.BIT22
BIT23 = _rllib.BIT23
BIT24 = _rllib.BIT24
BIT25 = _rllib.BIT25
BIT26 = _rllib.BIT26
BIT27 = _rllib.BIT27
BIT28 = _rllib.BIT28
BIT29 = _rllib.BIT29
BIT30 = _rllib.BIT30
BIT31 = _rllib.BIT31
rlMAX_EVENT = _rllib.rlMAX_EVENT
rlInfo = _rllib.rlInfo
rlWarning = _rllib.rlWarning
rlError = _rllib.rlError
rlCritical = _rllib.rlCritical
rlFatal = _rllib.rlFatal
rlTest = _rllib.rlTest
rlEVENT_SIZE = _rllib.rlEVENT_SIZE
rlEventInit = _rllib.rlEventInit
rlSetEventLocation = _rllib.rlSetEventLocation
rlEventPrintf = _rllib.rlEventPrintf
rlMAX_MESSAGES = _rllib.rlMAX_MESSAGES
class rlEventLogServer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlEventLogServer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlEventLogServer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlEventLogServer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlEventLogServer
    __del__ = lambda self : None;
    def getEvent(*args): return _rllib.rlEventLogServer_getEvent(*args)
    def putEvent(*args): return _rllib.rlEventLogServer_putEvent(*args)
rlEventLogServer_swigregister = _rllib.rlEventLogServer_swigregister
rlEventLogServer_swigregister(rlEventLogServer)
rlSubmitPvserver = _rllib.rlSubmitPvserver
cvar = _rllib.cvar
rlevent_name = cvar.rlevent_name

class rlEventLogServerThreads(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlEventLogServerThreads, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlEventLogServerThreads, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlEventLogServerThreads(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlEventLogServerThreads
    __del__ = lambda self : None;
    def start(*args): return _rllib.rlEventLogServerThreads_start(*args)
    def getPort(*args): return _rllib.rlEventLogServerThreads_getPort(*args)
    __swig_setmethods__["event_log_server"] = _rllib.rlEventLogServerThreads_event_log_server_set
    __swig_getmethods__["event_log_server"] = _rllib.rlEventLogServerThreads_event_log_server_get
    if _newclass:event_log_server = _swig_property(_rllib.rlEventLogServerThreads_event_log_server_get, _rllib.rlEventLogServerThreads_event_log_server_set)
rlEventLogServerThreads_swigregister = _rllib.rlEventLogServerThreads_swigregister
rlEventLogServerThreads_swigregister(rlEventLogServerThreads)

class rlDataProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlDataProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlDataProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlDataProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlDataProvider
    __del__ = lambda self : None;
    def getInt(*args): return _rllib.rlDataProvider_getInt(*args)
    def getFloat(*args): return _rllib.rlDataProvider_getFloat(*args)
    def getIntArray(*args): return _rllib.rlDataProvider_getIntArray(*args)
    def getFloatArray(*args): return _rllib.rlDataProvider_getFloatArray(*args)
    def getString(*args): return _rllib.rlDataProvider_getString(*args)
    def setInt(*args): return _rllib.rlDataProvider_setInt(*args)
    def setFloat(*args): return _rllib.rlDataProvider_setFloat(*args)
    def setIntArray(*args): return _rllib.rlDataProvider_setIntArray(*args)
    def setFloatArray(*args): return _rllib.rlDataProvider_setFloatArray(*args)
    def setString(*args): return _rllib.rlDataProvider_setString(*args)
    def getIntAndReset(*args): return _rllib.rlDataProvider_getIntAndReset(*args)
    def setIntAndWaitForReset(*args): return _rllib.rlDataProvider_setIntAndWaitForReset(*args)
    def setInt0Semaphore(*args): return _rllib.rlDataProvider_setInt0Semaphore(*args)
    def getInt0Semaphore(*args): return _rllib.rlDataProvider_getInt0Semaphore(*args)
    def run(*args): return _rllib.rlDataProvider_run(*args)
rlDataProvider_swigregister = _rllib.rlDataProvider_swigregister
rlDataProvider_swigregister(rlDataProvider)

class rlDataProviderClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlDataProviderClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlDataProviderClient, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlDataProviderClient(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlDataProviderClient
    __del__ = lambda self : None;
    def getInt(*args): return _rllib.rlDataProviderClient_getInt(*args)
    def getFloat(*args): return _rllib.rlDataProviderClient_getFloat(*args)
    def getIntArray(*args): return _rllib.rlDataProviderClient_getIntArray(*args)
    def getFloatArray(*args): return _rllib.rlDataProviderClient_getFloatArray(*args)
    def getString(*args): return _rllib.rlDataProviderClient_getString(*args)
    def setInt(*args): return _rllib.rlDataProviderClient_setInt(*args)
    def setFloat(*args): return _rllib.rlDataProviderClient_setFloat(*args)
    def setIntArray(*args): return _rllib.rlDataProviderClient_setIntArray(*args)
    def setFloatArray(*args): return _rllib.rlDataProviderClient_setFloatArray(*args)
    def setString(*args): return _rllib.rlDataProviderClient_setString(*args)
    def getIntAndReset(*args): return _rllib.rlDataProviderClient_getIntAndReset(*args)
    def setIntAndWaitForReset(*args): return _rllib.rlDataProviderClient_setIntAndWaitForReset(*args)
    def getInt0Semaphore(*args): return _rllib.rlDataProviderClient_getInt0Semaphore(*args)
rlDataProviderClient_swigregister = _rllib.rlDataProviderClient_swigregister
rlDataProviderClient_swigregister(rlDataProviderClient)

class rlDataProviderThreads(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlDataProviderThreads, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlDataProviderThreads, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlDataProviderThreads(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlDataProviderThreads
    __del__ = lambda self : None;
    def start(*args): return _rllib.rlDataProviderThreads_start(*args)
    __swig_setmethods__["provider"] = _rllib.rlDataProviderThreads_provider_set
    __swig_getmethods__["provider"] = _rllib.rlDataProviderThreads_provider_get
    if _newclass:provider = _swig_property(_rllib.rlDataProviderThreads_provider_get, _rllib.rlDataProviderThreads_provider_set)
    __swig_setmethods__["thread"] = _rllib.rlDataProviderThreads_thread_set
    __swig_getmethods__["thread"] = _rllib.rlDataProviderThreads_thread_get
    if _newclass:thread = _swig_property(_rllib.rlDataProviderThreads_thread_get, _rllib.rlDataProviderThreads_thread_set)
    __swig_setmethods__["port"] = _rllib.rlDataProviderThreads_port_set
    __swig_getmethods__["port"] = _rllib.rlDataProviderThreads_port_get
    if _newclass:port = _swig_property(_rllib.rlDataProviderThreads_port_get, _rllib.rlDataProviderThreads_port_set)
rlDataProviderThreads_swigregister = _rllib.rlDataProviderThreads_swigregister
rlDataProviderThreads_swigregister(rlDataProviderThreads)

B0 = _rllib.B0
B50 = _rllib.B50
B75 = _rllib.B75
B110 = _rllib.B110
B134 = _rllib.B134
B150 = _rllib.B150
B200 = _rllib.B200
B300 = _rllib.B300
B600 = _rllib.B600
B1200 = _rllib.B1200
B1800 = _rllib.B1800
B2400 = _rllib.B2400
B4800 = _rllib.B4800
B9600 = _rllib.B9600
B19200 = _rllib.B19200
B38400 = _rllib.B38400
B57600 = _rllib.B57600
B115200 = _rllib.B115200
B230400 = _rllib.B230400
B460800 = _rllib.B460800
B500000 = _rllib.B500000
B576000 = _rllib.B576000
B921600 = _rllib.B921600
B1000000 = _rllib.B1000000
B1152000 = _rllib.B1152000
B1500000 = _rllib.B1500000
B2000000 = _rllib.B2000000
B2500000 = _rllib.B2500000
B3000000 = _rllib.B3000000
B3500000 = _rllib.B3500000
B4000000 = _rllib.B4000000
class rlSerial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlSerial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlSerial, name)
    __repr__ = _swig_repr
    NONE = _rllib.rlSerial_NONE
    ODD = _rllib.rlSerial_ODD
    EVEN = _rllib.rlSerial_EVEN
    def __init__(self, *args): 
        this = _rllib.new_rlSerial(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlSerial
    __del__ = lambda self : None;
    def openDevice(*args): return _rllib.rlSerial_openDevice(*args)
    def select(*args): return _rllib.rlSerial_select(*args)
    def readChar(*args): return _rllib.rlSerial_readChar(*args)
    def writeChar(*args): return _rllib.rlSerial_writeChar(*args)
    def readBlock(*args): return _rllib.rlSerial_readBlock(*args)
    def writeBlock(*args): return _rllib.rlSerial_writeBlock(*args)
    def readLine(*args): return _rllib.rlSerial_readLine(*args)
    def closeDevice(*args): return _rllib.rlSerial_closeDevice(*args)
    def setTrace(*args): return _rllib.rlSerial_setTrace(*args)
rlSerial_swigregister = _rllib.rlSerial_swigregister
rlSerial_swigregister(rlSerial)

class rlModbus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlModbus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlModbus, name)
    __repr__ = _swig_repr
    MODBUS_CHECKSUM_ERROR = _rllib.rlModbus_MODBUS_CHECKSUM_ERROR
    MODBUS_ERROR = _rllib.rlModbus_MODBUS_ERROR
    MODBUS_SUCCESS = _rllib.rlModbus_MODBUS_SUCCESS
    MODBUS_RTU = _rllib.rlModbus_MODBUS_RTU
    MODBUS_ASCII = _rllib.rlModbus_MODBUS_ASCII
    ReadCoilStatus = _rllib.rlModbus_ReadCoilStatus
    ReadInputStatus = _rllib.rlModbus_ReadInputStatus
    ReadHoldingRegisters = _rllib.rlModbus_ReadHoldingRegisters
    ReadInputRegisters = _rllib.rlModbus_ReadInputRegisters
    ForceSingleCoil = _rllib.rlModbus_ForceSingleCoil
    PresetSingleRegister = _rllib.rlModbus_PresetSingleRegister
    ReadExceptionStatus = _rllib.rlModbus_ReadExceptionStatus
    FetchCommEventCtr = _rllib.rlModbus_FetchCommEventCtr
    FetchCommEventLog = _rllib.rlModbus_FetchCommEventLog
    ForceMultipleCoils = _rllib.rlModbus_ForceMultipleCoils
    PresetMultipleRegs = _rllib.rlModbus_PresetMultipleRegs
    ReportSlaveID = _rllib.rlModbus_ReportSlaveID
    ReadGeneralReference = _rllib.rlModbus_ReadGeneralReference
    WriteGeneralReference = _rllib.rlModbus_WriteGeneralReference
    MaskWrite4XRegisters = _rllib.rlModbus_MaskWrite4XRegisters
    ReadWrite4XRegisters = _rllib.rlModbus_ReadWrite4XRegisters
    ReadFifoQueue = _rllib.rlModbus_ReadFifoQueue
    def __init__(self, *args): 
        this = _rllib.new_rlModbus(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlModbus
    __del__ = lambda self : None;
    def write(*args): return _rllib.rlModbus_write(*args)
    def request(*args): return _rllib.rlModbus_request(*args)
    def response(*args): return _rllib.rlModbus_response(*args)
    def readRequest(*args): return _rllib.rlModbus_readRequest(*args)
    def registerSocket(*args): return _rllib.rlModbus_registerSocket(*args)
    def registerSerial(*args): return _rllib.rlModbus_registerSerial(*args)
    def data2int(*args): return _rllib.rlModbus_data2int(*args)
    def int2data(*args): return _rllib.rlModbus_int2data(*args)
    def intsize(*args): return _rllib.rlModbus_intsize(*args)
    __swig_setmethods__["autoreconnectSocket"] = _rllib.rlModbus_autoreconnectSocket_set
    __swig_getmethods__["autoreconnectSocket"] = _rllib.rlModbus_autoreconnectSocket_get
    if _newclass:autoreconnectSocket = _swig_property(_rllib.rlModbus_autoreconnectSocket_get, _rllib.rlModbus_autoreconnectSocket_set)
rlModbus_swigregister = _rllib.rlModbus_swigregister
rlModbus_swigregister(rlModbus)

class rlModbusClient(rlMailbox):
    __swig_setmethods__ = {}
    for _s in [rlMailbox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlModbusClient, name, value)
    __swig_getmethods__ = {}
    for _s in [rlMailbox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, rlModbusClient, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlModbusClient(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlModbusClient
    __del__ = lambda self : None;
    def write(*args): return _rllib.rlModbusClient_write(*args)
    def writeSingleCoil(*args): return _rllib.rlModbusClient_writeSingleCoil(*args)
    def writeMultipleCoils(*args): return _rllib.rlModbusClient_writeMultipleCoils(*args)
    def writePresetSingleRegister(*args): return _rllib.rlModbusClient_writePresetSingleRegister(*args)
    def writePresetMultipleRegisters(*args): return _rllib.rlModbusClient_writePresetMultipleRegisters(*args)
    def readBit(*args): return _rllib.rlModbusClient_readBit(*args)
    def readByte(*args): return _rllib.rlModbusClient_readByte(*args)
    def readShort(*args): return _rllib.rlModbusClient_readShort(*args)
rlModbusClient_swigregister = _rllib.rlModbusClient_swigregister
rlModbusClient_swigregister(rlModbusClient)

class rl3964R(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rl3964R, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rl3964R, name)
    __repr__ = _swig_repr
    highPriority = _rllib.rl3964R_highPriority
    lowPriority = _rllib.rl3964R_lowPriority
    def __init__(self, *args): 
        this = _rllib.new_rl3964R(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rl3964R
    __del__ = lambda self : None;
    def open(*args): return _rllib.rl3964R_open(*args)
    def close(*args): return _rllib.rl3964R_close(*args)
    def setReadCallback(*args): return _rllib.rl3964R_setReadCallback(*args)
    def write(*args): return _rllib.rl3964R_write(*args)
    def send(*args): return _rllib.rl3964R_send(*args)
    def receive(*args): return _rllib.rl3964R_receive(*args)
    __swig_setmethods__["receiver"] = _rllib.rl3964R_receiver_set
    __swig_getmethods__["receiver"] = _rllib.rl3964R_receiver_get
    if _newclass:receiver = _swig_property(_rllib.rl3964R_receiver_get, _rllib.rl3964R_receiver_set)
    __swig_setmethods__["tty"] = _rllib.rl3964R_tty_set
    __swig_getmethods__["tty"] = _rllib.rl3964R_tty_get
    if _newclass:tty = _swig_property(_rllib.rl3964R_tty_get, _rllib.rl3964R_tty_set)
    __swig_setmethods__["state"] = _rllib.rl3964R_state_set
    __swig_getmethods__["state"] = _rllib.rl3964R_state_get
    if _newclass:state = _swig_property(_rllib.rl3964R_state_get, _rllib.rl3964R_state_set)
    __swig_setmethods__["priority"] = _rllib.rl3964R_priority_set
    __swig_getmethods__["priority"] = _rllib.rl3964R_priority_get
    if _newclass:priority = _swig_property(_rllib.rl3964R_priority_get, _rllib.rl3964R_priority_set)
    __swig_setmethods__["run"] = _rllib.rl3964R_run_set
    __swig_getmethods__["run"] = _rllib.rl3964R_run_get
    if _newclass:run = _swig_property(_rllib.rl3964R_run_get, _rllib.rl3964R_run_set)
    __swig_setmethods__["debug"] = _rllib.rl3964R_debug_set
    __swig_getmethods__["debug"] = _rllib.rl3964R_debug_get
    if _newclass:debug = _swig_property(_rllib.rl3964R_debug_get, _rllib.rl3964R_debug_set)
    def dprintf(*args): return _rllib.rl3964R_dprintf(*args)
rl3964R_swigregister = _rllib.rl3964R_swigregister
rl3964R_swigregister(rl3964R)

class rlSiemensTCP(rlSocket):
    __swig_setmethods__ = {}
    for _s in [rlSocket]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlSiemensTCP, name, value)
    __swig_getmethods__ = {}
    for _s in [rlSocket]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, rlSiemensTCP, name)
    __repr__ = _swig_repr
    ORG_DB = _rllib.rlSiemensTCP_ORG_DB
    ORG_M = _rllib.rlSiemensTCP_ORG_M
    ORG_E = _rllib.rlSiemensTCP_ORG_E
    ORG_A = _rllib.rlSiemensTCP_ORG_A
    ORG_PEPA = _rllib.rlSiemensTCP_ORG_PEPA
    ORG_Z = _rllib.rlSiemensTCP_ORG_Z
    ORG_T = _rllib.rlSiemensTCP_ORG_T
    S7_200 = _rllib.rlSiemensTCP_S7_200
    S7_300 = _rllib.rlSiemensTCP_S7_300
    S7_400 = _rllib.rlSiemensTCP_S7_400
    S5 = _rllib.rlSiemensTCP_S5
    RACK_SLOT = _rllib.rlSiemensTCP_RACK_SLOT
    WriteBit = _rllib.rlSiemensTCP_WriteBit
    WriteByte = _rllib.rlSiemensTCP_WriteByte
    def __init__(self, *args): 
        this = _rllib.new_rlSiemensTCP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlSiemensTCP
    __del__ = lambda self : None;
    def write(*args): return _rllib.rlSiemensTCP_write(*args)
    def fetch(*args): return _rllib.rlSiemensTCP_fetch(*args)
rlSiemensTCP_swigregister = _rllib.rlSiemensTCP_swigregister
rlSiemensTCP_swigregister(rlSiemensTCP)

class rlSiemensTCPClient(rlMailbox):
    __swig_setmethods__ = {}
    for _s in [rlMailbox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlSiemensTCPClient, name, value)
    __swig_getmethods__ = {}
    for _s in [rlMailbox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, rlSiemensTCPClient, name)
    __repr__ = _swig_repr
    ORG_DB = _rllib.rlSiemensTCPClient_ORG_DB
    ORG_M = _rllib.rlSiemensTCPClient_ORG_M
    ORG_E = _rllib.rlSiemensTCPClient_ORG_E
    ORG_A = _rllib.rlSiemensTCPClient_ORG_A
    ORG_PEPA = _rllib.rlSiemensTCPClient_ORG_PEPA
    ORG_Z = _rllib.rlSiemensTCPClient_ORG_Z
    ORG_T = _rllib.rlSiemensTCPClient_ORG_T
    def __init__(self, *args): 
        this = _rllib.new_rlSiemensTCPClient(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlSiemensTCPClient
    __del__ = lambda self : None;
    def write(*args): return _rllib.rlSiemensTCPClient_write(*args)
    def writeBit(*args): return _rllib.rlSiemensTCPClient_writeBit(*args)
    def writeByte(*args): return _rllib.rlSiemensTCPClient_writeByte(*args)
    def writeFloat(*args): return _rllib.rlSiemensTCPClient_writeFloat(*args)
    def writeDword(*args): return _rllib.rlSiemensTCPClient_writeDword(*args)
    def writeShort(*args): return _rllib.rlSiemensTCPClient_writeShort(*args)
    def writeUDword(*args): return _rllib.rlSiemensTCPClient_writeUDword(*args)
    def writeUShort(*args): return _rllib.rlSiemensTCPClient_writeUShort(*args)
    def read(*args): return _rllib.rlSiemensTCPClient_read(*args)
    def Float(*args): return _rllib.rlSiemensTCPClient_Float(*args)
    def Dword(*args): return _rllib.rlSiemensTCPClient_Dword(*args)
    def Short(*args): return _rllib.rlSiemensTCPClient_Short(*args)
    def UDword(*args): return _rllib.rlSiemensTCPClient_UDword(*args)
    def UShort(*args): return _rllib.rlSiemensTCPClient_UShort(*args)
    __swig_setmethods__["buf"] = _rllib.rlSiemensTCPClient_buf_set
    __swig_getmethods__["buf"] = _rllib.rlSiemensTCPClient_buf_get
    if _newclass:buf = _swig_property(_rllib.rlSiemensTCPClient_buf_get, _rllib.rlSiemensTCPClient_buf_set)
rlSiemensTCPClient_swigregister = _rllib.rlSiemensTCPClient_swigregister
rlSiemensTCPClient_swigregister(rlSiemensTCPClient)

class rlPPIClient(rlMailbox):
    __swig_setmethods__ = {}
    for _s in [rlMailbox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlPPIClient, name, value)
    __swig_getmethods__ = {}
    for _s in [rlMailbox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, rlPPIClient, name)
    __repr__ = _swig_repr
    daveSD = _rllib.rlPPIClient_daveSD
    daveInputs = _rllib.rlPPIClient_daveInputs
    daveOutputs = _rllib.rlPPIClient_daveOutputs
    daveFlags = _rllib.rlPPIClient_daveFlags
    daveDB = _rllib.rlPPIClient_daveDB
    daveDI = _rllib.rlPPIClient_daveDI
    daveLocal = _rllib.rlPPIClient_daveLocal
    daveV = _rllib.rlPPIClient_daveV
    daveCounter = _rllib.rlPPIClient_daveCounter
    daveTimer = _rllib.rlPPIClient_daveTimer
    def __init__(self, *args): 
        this = _rllib.new_rlPPIClient(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlPPIClient
    __del__ = lambda self : None;
    def write(*args): return _rllib.rlPPIClient_write(*args)
    def writeFloat(*args): return _rllib.rlPPIClient_writeFloat(*args)
    def writeDword(*args): return _rllib.rlPPIClient_writeDword(*args)
    def writeShort(*args): return _rllib.rlPPIClient_writeShort(*args)
    def writeUDword(*args): return _rllib.rlPPIClient_writeUDword(*args)
    def writeUShort(*args): return _rllib.rlPPIClient_writeUShort(*args)
    def read(*args): return _rllib.rlPPIClient_read(*args)
    def Float(*args): return _rllib.rlPPIClient_Float(*args)
    def Dword(*args): return _rllib.rlPPIClient_Dword(*args)
    def Short(*args): return _rllib.rlPPIClient_Short(*args)
    def UDword(*args): return _rllib.rlPPIClient_UDword(*args)
    def UShort(*args): return _rllib.rlPPIClient_UShort(*args)
    __swig_setmethods__["buf"] = _rllib.rlPPIClient_buf_set
    __swig_getmethods__["buf"] = _rllib.rlPPIClient_buf_get
    if _newclass:buf = _swig_property(_rllib.rlPPIClient_buf_get, _rllib.rlPPIClient_buf_set)
rlPPIClient_swigregister = _rllib.rlPPIClient_swigregister
rlPPIClient_swigregister(rlPPIClient)

class rlSvgPosition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlSvgPosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlSvgPosition, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlSvgPosition(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlSvgPosition
    __del__ = lambda self : None;
    __swig_setmethods__["sx"] = _rllib.rlSvgPosition_sx_set
    __swig_getmethods__["sx"] = _rllib.rlSvgPosition_sx_get
    if _newclass:sx = _swig_property(_rllib.rlSvgPosition_sx_get, _rllib.rlSvgPosition_sx_set)
    __swig_setmethods__["alpha"] = _rllib.rlSvgPosition_alpha_set
    __swig_getmethods__["alpha"] = _rllib.rlSvgPosition_alpha_get
    if _newclass:alpha = _swig_property(_rllib.rlSvgPosition_alpha_get, _rllib.rlSvgPosition_alpha_set)
    __swig_setmethods__["x0"] = _rllib.rlSvgPosition_x0_set
    __swig_getmethods__["x0"] = _rllib.rlSvgPosition_x0_get
    if _newclass:x0 = _swig_property(_rllib.rlSvgPosition_x0_get, _rllib.rlSvgPosition_x0_set)
    __swig_setmethods__["y0"] = _rllib.rlSvgPosition_y0_set
    __swig_getmethods__["y0"] = _rllib.rlSvgPosition_y0_get
    if _newclass:y0 = _swig_property(_rllib.rlSvgPosition_y0_get, _rllib.rlSvgPosition_y0_set)
    __swig_setmethods__["cx"] = _rllib.rlSvgPosition_cx_set
    __swig_getmethods__["cx"] = _rllib.rlSvgPosition_cx_get
    if _newclass:cx = _swig_property(_rllib.rlSvgPosition_cx_get, _rllib.rlSvgPosition_cx_set)
    __swig_setmethods__["cy"] = _rllib.rlSvgPosition_cy_set
    __swig_getmethods__["cy"] = _rllib.rlSvgPosition_cy_get
    if _newclass:cy = _swig_property(_rllib.rlSvgPosition_cy_get, _rllib.rlSvgPosition_cy_set)
    def setInit(*args): return _rllib.rlSvgPosition_setInit(*args)
    def move(*args): return _rllib.rlSvgPosition_move(*args)
    def moveRelative(*args): return _rllib.rlSvgPosition_moveRelative(*args)
    def scale(*args): return _rllib.rlSvgPosition_scale(*args)
    def scaleRelative(*args): return _rllib.rlSvgPosition_scaleRelative(*args)
    def rotate(*args): return _rllib.rlSvgPosition_rotate(*args)
    __swig_getmethods__["init"] = _rllib.rlSvgPosition_init_get
    if _newclass:init = _swig_property(_rllib.rlSvgPosition_init_get)
rlSvgPosition_swigregister = _rllib.rlSvgPosition_swigregister
rlSvgPosition_swigregister(rlSvgPosition)

class rlSvgPosition_init(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlSvgPosition_init, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlSvgPosition_init, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sx"] = _rllib.rlSvgPosition_init_sx_set
    __swig_getmethods__["sx"] = _rllib.rlSvgPosition_init_sx_get
    if _newclass:sx = _swig_property(_rllib.rlSvgPosition_init_sx_get, _rllib.rlSvgPosition_init_sx_set)
    __swig_setmethods__["alpha"] = _rllib.rlSvgPosition_init_alpha_set
    __swig_getmethods__["alpha"] = _rllib.rlSvgPosition_init_alpha_get
    if _newclass:alpha = _swig_property(_rllib.rlSvgPosition_init_alpha_get, _rllib.rlSvgPosition_init_alpha_set)
    __swig_setmethods__["x0"] = _rllib.rlSvgPosition_init_x0_set
    __swig_getmethods__["x0"] = _rllib.rlSvgPosition_init_x0_get
    if _newclass:x0 = _swig_property(_rllib.rlSvgPosition_init_x0_get, _rllib.rlSvgPosition_init_x0_set)
    __swig_setmethods__["y0"] = _rllib.rlSvgPosition_init_y0_set
    __swig_getmethods__["y0"] = _rllib.rlSvgPosition_init_y0_get
    if _newclass:y0 = _swig_property(_rllib.rlSvgPosition_init_y0_get, _rllib.rlSvgPosition_init_y0_set)
    __swig_setmethods__["w"] = _rllib.rlSvgPosition_init_w_set
    __swig_getmethods__["w"] = _rllib.rlSvgPosition_init_w_get
    if _newclass:w = _swig_property(_rllib.rlSvgPosition_init_w_get, _rllib.rlSvgPosition_init_w_set)
    __swig_setmethods__["h"] = _rllib.rlSvgPosition_init_h_set
    __swig_getmethods__["h"] = _rllib.rlSvgPosition_init_h_get
    if _newclass:h = _swig_property(_rllib.rlSvgPosition_init_h_get, _rllib.rlSvgPosition_init_h_set)
    def __init__(self, *args): 
        this = _rllib.new_rlSvgPosition_init(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlSvgPosition_init
    __del__ = lambda self : None;
rlSvgPosition_init_swigregister = _rllib.rlSvgPosition_init_swigregister
rlSvgPosition_init_swigregister(rlSvgPosition_init)

class SVG_LINE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVG_LINE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SVG_LINE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["line"] = _rllib.SVG_LINE_line_set
    __swig_getmethods__["line"] = _rllib.SVG_LINE_line_get
    if _newclass:line = _swig_property(_rllib.SVG_LINE_line_get, _rllib.SVG_LINE_line_set)
    __swig_setmethods__["next"] = _rllib.SVG_LINE_next_set
    __swig_getmethods__["next"] = _rllib.SVG_LINE_next_get
    if _newclass:next = _swig_property(_rllib.SVG_LINE_next_get, _rllib.SVG_LINE_next_set)
    def __init__(self, *args): 
        this = _rllib.new_SVG_LINE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_SVG_LINE
    __del__ = lambda self : None;
SVG_LINE_swigregister = _rllib.SVG_LINE_swigregister
SVG_LINE_swigregister(SVG_LINE)

class rlSvgAnimator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlSvgAnimator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlSvgAnimator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlSvgAnimator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlSvgAnimator
    __del__ = lambda self : None;
    def setSocket(*args): return _rllib.rlSvgAnimator_setSocket(*args)
    def setId(*args): return _rllib.rlSvgAnimator_setId(*args)
    def read(*args): return _rllib.rlSvgAnimator_read(*args)
    def writeSocket(*args): return _rllib.rlSvgAnimator_writeSocket(*args)
    def svgPrintf(*args): return _rllib.rlSvgAnimator_svgPrintf(*args)
    def svgRecursivePrintf(*args): return _rllib.rlSvgAnimator_svgRecursivePrintf(*args)
    def svgSearchAndReplace(*args): return _rllib.rlSvgAnimator_svgSearchAndReplace(*args)
    def svgRecursiveSearchAndReplace(*args): return _rllib.rlSvgAnimator_svgRecursiveSearchAndReplace(*args)
    def svgTextPrintf(*args): return _rllib.rlSvgAnimator_svgTextPrintf(*args)
    def show(*args): return _rllib.rlSvgAnimator_show(*args)
    def testoutput(*args): return _rllib.rlSvgAnimator_testoutput(*args)
    def setMatrix(*args): return _rllib.rlSvgAnimator_setMatrix(*args)
    def setMainObject(*args): return _rllib.rlSvgAnimator_setMainObject(*args)
    def mainObject(*args): return _rllib.rlSvgAnimator_mainObject(*args)
    def setXY0(*args): return _rllib.rlSvgAnimator_setXY0(*args)
    def x0(*args): return _rllib.rlSvgAnimator_x0(*args)
    def y0(*args): return _rllib.rlSvgAnimator_y0(*args)
    def setMouseXY0(*args): return _rllib.rlSvgAnimator_setMouseXY0(*args)
    def mouseX0(*args): return _rllib.rlSvgAnimator_mouseX0(*args)
    def mouseY0(*args): return _rllib.rlSvgAnimator_mouseY0(*args)
    def setMouseXY1(*args): return _rllib.rlSvgAnimator_setMouseXY1(*args)
    def mouseX1(*args): return _rllib.rlSvgAnimator_mouseX1(*args)
    def mouseY1(*args): return _rllib.rlSvgAnimator_mouseY1(*args)
    def setScale(*args): return _rllib.rlSvgAnimator_setScale(*args)
    def scale(*args): return _rllib.rlSvgAnimator_scale(*args)
    def zoomCenter(*args): return _rllib.rlSvgAnimator_zoomCenter(*args)
    def zoomRect(*args): return _rllib.rlSvgAnimator_zoomRect(*args)
    def setMainObjectMatrix(*args): return _rllib.rlSvgAnimator_setMainObjectMatrix(*args)
    def setWindowSize(*args): return _rllib.rlSvgAnimator_setWindowSize(*args)
    def windowWidth(*args): return _rllib.rlSvgAnimator_windowWidth(*args)
    def windowHeight(*args): return _rllib.rlSvgAnimator_windowHeight(*args)
    def moveMainObject(*args): return _rllib.rlSvgAnimator_moveMainObject(*args)
rlSvgAnimator_swigregister = _rllib.rlSvgAnimator_swigregister
rlSvgAnimator_swigregister(rlSvgAnimator)

class rlSvgCat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlSvgCat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlSvgCat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlSvgCat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlSvgCat
    __del__ = lambda self : None;
    def open(*args): return _rllib.rlSvgCat_open(*args)
    def reopenSocket(*args): return _rllib.rlSvgCat_reopenSocket(*args)
    def cat(*args): return _rllib.rlSvgCat_cat(*args)
    def close(*args): return _rllib.rlSvgCat_close(*args)
rlSvgCat_swigregister = _rllib.rlSvgCat_swigregister
rlSvgCat_swigregister(rlSvgCat)

class rlFileLines(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlFileLines, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlFileLines, name)
    __repr__ = _swig_repr
    __swig_setmethods__["line"] = _rllib.rlFileLines_line_set
    __swig_getmethods__["line"] = _rllib.rlFileLines_line_get
    if _newclass:line = _swig_property(_rllib.rlFileLines_line_get, _rllib.rlFileLines_line_set)
    __swig_setmethods__["next"] = _rllib.rlFileLines_next_set
    __swig_getmethods__["next"] = _rllib.rlFileLines_next_get
    if _newclass:next = _swig_property(_rllib.rlFileLines_next_get, _rllib.rlFileLines_next_set)
    def __init__(self, *args): 
        this = _rllib.new_rlFileLines(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlFileLines
    __del__ = lambda self : None;
rlFileLines_swigregister = _rllib.rlFileLines_swigregister
rlFileLines_swigregister(rlFileLines)

class rlFileLoad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlFileLoad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlFileLoad, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlFileLoad(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlFileLoad
    __del__ = lambda self : None;
    def load(*args): return _rllib.rlFileLoad_load(*args)
    def unload(*args): return _rllib.rlFileLoad_unload(*args)
    def firstLine(*args): return _rllib.rlFileLoad_firstLine(*args)
    def nextLine(*args): return _rllib.rlFileLoad_nextLine(*args)
    def setDebug(*args): return _rllib.rlFileLoad_setDebug(*args)
rlFileLoad_swigregister = _rllib.rlFileLoad_swigregister
rlFileLoad_swigregister(rlFileLoad)

class rlHistoryLogLine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlHistoryLogLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlHistoryLogLine, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _rllib.rlHistoryLogLine_next_set
    __swig_getmethods__["next"] = _rllib.rlHistoryLogLine_next_get
    if _newclass:next = _swig_property(_rllib.rlHistoryLogLine_next_get, _rllib.rlHistoryLogLine_next_set)
    __swig_setmethods__["line"] = _rllib.rlHistoryLogLine_line_set
    __swig_getmethods__["line"] = _rllib.rlHistoryLogLine_line_get
    if _newclass:line = _swig_property(_rllib.rlHistoryLogLine_line_get, _rllib.rlHistoryLogLine_line_set)
    def __init__(self, *args): 
        this = _rllib.new_rlHistoryLogLine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlHistoryLogLine
    __del__ = lambda self : None;
rlHistoryLogLine_swigregister = _rllib.rlHistoryLogLine_swigregister
rlHistoryLogLine_swigregister(rlHistoryLogLine)

class rlHistoryLogger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlHistoryLogger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlHistoryLogger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlHistoryLogger(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlHistoryLogger
    __del__ = lambda self : None;
    def pushLine(*args): return _rllib.rlHistoryLogger_pushLine(*args)
    def firstLine(*args): return _rllib.rlHistoryLogger_firstLine(*args)
    def nextLine(*args): return _rllib.rlHistoryLogger_nextLine(*args)
    __swig_setmethods__["mutex"] = _rllib.rlHistoryLogger_mutex_set
    __swig_getmethods__["mutex"] = _rllib.rlHistoryLogger_mutex_get
    if _newclass:mutex = _swig_property(_rllib.rlHistoryLogger_mutex_get, _rllib.rlHistoryLogger_mutex_set)
    __swig_setmethods__["debug"] = _rllib.rlHistoryLogger_debug_set
    __swig_getmethods__["debug"] = _rllib.rlHistoryLogger_debug_get
    if _newclass:debug = _swig_property(_rllib.rlHistoryLogger_debug_get, _rllib.rlHistoryLogger_debug_set)
rlHistoryLogger_swigregister = _rllib.rlHistoryLogger_swigregister
rlHistoryLogger_swigregister(rlHistoryLogger)

class rlHistoryReaderLine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlHistoryReaderLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlHistoryReaderLine, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _rllib.rlHistoryReaderLine_next_set
    __swig_getmethods__["next"] = _rllib.rlHistoryReaderLine_next_get
    if _newclass:next = _swig_property(_rllib.rlHistoryReaderLine_next_get, _rllib.rlHistoryReaderLine_next_set)
    __swig_setmethods__["line"] = _rllib.rlHistoryReaderLine_line_set
    __swig_getmethods__["line"] = _rllib.rlHistoryReaderLine_line_get
    if _newclass:line = _swig_property(_rllib.rlHistoryReaderLine_line_get, _rllib.rlHistoryReaderLine_line_set)
    def __init__(self, *args): 
        this = _rllib.new_rlHistoryReaderLine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlHistoryReaderLine
    __del__ = lambda self : None;
rlHistoryReaderLine_swigregister = _rllib.rlHistoryReaderLine_swigregister
rlHistoryReaderLine_swigregister(rlHistoryReaderLine)

class rlHistoryReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlHistoryReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlHistoryReader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlHistoryReader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlHistoryReader
    __del__ = lambda self : None;
    def read(*args): return _rllib.rlHistoryReader_read(*args)
    def firstLine(*args): return _rllib.rlHistoryReader_firstLine(*args)
    def nextLine(*args): return _rllib.rlHistoryReader_nextLine(*args)
    def clean(*args): return _rllib.rlHistoryReader_clean(*args)
    def cat(*args): return _rllib.rlHistoryReader_cat(*args)
    __swig_setmethods__["debug"] = _rllib.rlHistoryReader_debug_set
    __swig_getmethods__["debug"] = _rllib.rlHistoryReader_debug_get
    if _newclass:debug = _swig_property(_rllib.rlHistoryReader_debug_get, _rllib.rlHistoryReader_debug_set)
rlHistoryReader_swigregister = _rllib.rlHistoryReader_swigregister
rlHistoryReader_swigregister(rlHistoryReader)

class rlHilscherCIF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlHilscherCIF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlHilscherCIF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlHilscherCIF(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlHilscherCIF
    __del__ = lambda self : None;
    __swig_setmethods__["debug"] = _rllib.rlHilscherCIF_debug_set
    __swig_getmethods__["debug"] = _rllib.rlHilscherCIF_debug_get
    if _newclass:debug = _swig_property(_rllib.rlHilscherCIF_debug_get, _rllib.rlHilscherCIF_debug_set)
    def open(*args): return _rllib.rlHilscherCIF_open(*args)
    def close(*args): return _rllib.rlHilscherCIF_close(*args)
    def devGetMessage(*args): return _rllib.rlHilscherCIF_devGetMessage(*args)
    def devPutMessage(*args): return _rllib.rlHilscherCIF_devPutMessage(*args)
    def devExchangeIO(*args): return _rllib.rlHilscherCIF_devExchangeIO(*args)
    def devOpenDriver(*args): return _rllib.rlHilscherCIF_devOpenDriver(*args)
    def devInitBoard(*args): return _rllib.rlHilscherCIF_devInitBoard(*args)
    def devGetInfo(*args): return _rllib.rlHilscherCIF_devGetInfo(*args)
    def devSetHostState(*args): return _rllib.rlHilscherCIF_devSetHostState(*args)
    def devPutTaskParameter(*args): return _rllib.rlHilscherCIF_devPutTaskParameter(*args)
    def devReset(*args): return _rllib.rlHilscherCIF_devReset(*args)
    def devExitBoard(*args): return _rllib.rlHilscherCIF_devExitBoard(*args)
    def devCloseDriver(*args): return _rllib.rlHilscherCIF_devCloseDriver(*args)
    def printFirmwareInfo(*args): return _rllib.rlHilscherCIF_printFirmwareInfo(*args)
    __swig_setmethods__["usBoardNumber"] = _rllib.rlHilscherCIF_usBoardNumber_set
    __swig_getmethods__["usBoardNumber"] = _rllib.rlHilscherCIF_usBoardNumber_get
    if _newclass:usBoardNumber = _swig_property(_rllib.rlHilscherCIF_usBoardNumber_get, _rllib.rlHilscherCIF_usBoardNumber_set)
    __swig_setmethods__["usDevState"] = _rllib.rlHilscherCIF_usDevState_set
    __swig_getmethods__["usDevState"] = _rllib.rlHilscherCIF_usDevState_get
    if _newclass:usDevState = _swig_property(_rllib.rlHilscherCIF_usDevState_get, _rllib.rlHilscherCIF_usDevState_set)
    __swig_setmethods__["usHostState"] = _rllib.rlHilscherCIF_usHostState_set
    __swig_getmethods__["usHostState"] = _rllib.rlHilscherCIF_usHostState_get
    if _newclass:usHostState = _swig_property(_rllib.rlHilscherCIF_usHostState_get, _rllib.rlHilscherCIF_usHostState_set)
    __swig_setmethods__["abInfo"] = _rllib.rlHilscherCIF_abInfo_set
    __swig_getmethods__["abInfo"] = _rllib.rlHilscherCIF_abInfo_get
    if _newclass:abInfo = _swig_property(_rllib.rlHilscherCIF_abInfo_get, _rllib.rlHilscherCIF_abInfo_set)
    __swig_setmethods__["aParameter"] = _rllib.rlHilscherCIF_aParameter_set
    __swig_getmethods__["aParameter"] = _rllib.rlHilscherCIF_aParameter_get
    if _newclass:aParameter = _swig_property(_rllib.rlHilscherCIF_aParameter_get, _rllib.rlHilscherCIF_aParameter_set)
    __swig_setmethods__["tIoInfo"] = _rllib.rlHilscherCIF_tIoInfo_set
    __swig_getmethods__["tIoInfo"] = _rllib.rlHilscherCIF_tIoInfo_get
    if _newclass:tIoInfo = _swig_property(_rllib.rlHilscherCIF_tIoInfo_get, _rllib.rlHilscherCIF_tIoInfo_set)
    __swig_setmethods__["tMessage"] = _rllib.rlHilscherCIF_tMessage_set
    __swig_getmethods__["tMessage"] = _rllib.rlHilscherCIF_tMessage_get
    if _newclass:tMessage = _swig_property(_rllib.rlHilscherCIF_tMessage_get, _rllib.rlHilscherCIF_tMessage_set)
    __swig_setmethods__["mutex"] = _rllib.rlHilscherCIF_mutex_set
    __swig_getmethods__["mutex"] = _rllib.rlHilscherCIF_mutex_get
    if _newclass:mutex = _swig_property(_rllib.rlHilscherCIF_mutex_get, _rllib.rlHilscherCIF_mutex_set)
rlHilscherCIF_swigregister = _rllib.rlHilscherCIF_swigregister
rlHilscherCIF_swigregister(rlHilscherCIF)

MSG_NOSIGNAL = _rllib.MSG_NOSIGNAL
class rlIpAdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlIpAdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlIpAdr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlIpAdr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlIpAdr
    __del__ = lambda self : None;
    def setAdr(*args): return _rllib.rlIpAdr_setAdr(*args)
    def __eq__(*args): return _rllib.rlIpAdr___eq__(*args)
    __swig_setmethods__["address"] = _rllib.rlIpAdr_address_set
    __swig_getmethods__["address"] = _rllib.rlIpAdr_address_get
    if _newclass:address = _swig_property(_rllib.rlIpAdr_address_get, _rllib.rlIpAdr_address_set)
rlIpAdr_swigregister = _rllib.rlIpAdr_swigregister
rlIpAdr_swigregister(rlIpAdr)

class rlUdpSocket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlUdpSocket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlUdpSocket, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rllib.new_rlUdpSocket(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlUdpSocket
    __del__ = lambda self : None;
    def setSockopt(*args): return _rllib.rlUdpSocket_setSockopt(*args)
    def bind(*args): return _rllib.rlUdpSocket_bind(*args)
    def select(*args): return _rllib.rlUdpSocket_select(*args)
    def recvfrom(*args): return _rllib.rlUdpSocket_recvfrom(*args)
    def sendto(*args): return _rllib.rlUdpSocket_sendto(*args)
    def printf(*args): return _rllib.rlUdpSocket_printf(*args)
    __swig_setmethods__["debug"] = _rllib.rlUdpSocket_debug_set
    __swig_getmethods__["debug"] = _rllib.rlUdpSocket_debug_get
    if _newclass:debug = _swig_property(_rllib.rlUdpSocket_debug_get, _rllib.rlUdpSocket_debug_set)
    __swig_setmethods__["readflag"] = _rllib.rlUdpSocket_readflag_set
    __swig_getmethods__["readflag"] = _rllib.rlUdpSocket_readflag_get
    if _newclass:readflag = _swig_property(_rllib.rlUdpSocket_readflag_get, _rllib.rlUdpSocket_readflag_set)
    __swig_setmethods__["writeflag"] = _rllib.rlUdpSocket_writeflag_set
    __swig_getmethods__["writeflag"] = _rllib.rlUdpSocket_writeflag_get
    if _newclass:writeflag = _swig_property(_rllib.rlUdpSocket_writeflag_get, _rllib.rlUdpSocket_writeflag_set)
rlUdpSocket_swigregister = _rllib.rlUdpSocket_swigregister
rlUdpSocket_swigregister(rlUdpSocket)

EIB_ON = _rllib.EIB_ON
EIB_OFF = _rllib.EIB_OFF
class rlEIBnetIP(rlUdpSocket):
    __swig_setmethods__ = {}
    for _s in [rlUdpSocket]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlEIBnetIP, name, value)
    __swig_getmethods__ = {}
    for _s in [rlUdpSocket]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, rlEIBnetIP, name)
    __repr__ = _swig_repr
    PORT = _rllib.rlEIBnetIP_PORT
    SUCCESS = _rllib.rlEIBnetIP_SUCCESS
    EIBERROR = _rllib.rlEIBnetIP_EIBERROR
    TIMEOUT = _rllib.rlEIBnetIP_TIMEOUT
    COULD_NOT_CONNECT = _rllib.rlEIBnetIP_COULD_NOT_CONNECT
    def __init__(self, *args): 
        this = _rllib.new_rlEIBnetIP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlEIBnetIP
    __del__ = lambda self : None;
    def setServer(*args): return _rllib.rlEIBnetIP_setServer(*args)
    def setClient(*args): return _rllib.rlEIBnetIP_setClient(*args)
    def startReading(*args): return _rllib.rlEIBnetIP_startReading(*args)
    def stopReading(*args): return _rllib.rlEIBnetIP_stopReading(*args)
    def value(*args): return _rllib.rlEIBnetIP_value(*args)
    def valueUnsigned(*args): return _rllib.rlEIBnetIP_valueUnsigned(*args)
    def valueFloat2(*args): return _rllib.rlEIBnetIP_valueFloat2(*args)
    def valueFloat4(*args): return _rllib.rlEIBnetIP_valueFloat4(*args)
    def setValue(*args): return _rllib.rlEIBnetIP_setValue(*args)
    def setValueUnsigned(*args): return _rllib.rlEIBnetIP_setValueUnsigned(*args)
    def setValueFloat(*args): return _rllib.rlEIBnetIP_setValueFloat(*args)
    def setText(*args): return _rllib.rlEIBnetIP_setText(*args)
    def getText(*args): return _rllib.rlEIBnetIP_getText(*args)
    def setSourceAdr(*args): return _rllib.rlEIBnetIP_setSourceAdr(*args)
    def dump(*args): return _rllib.rlEIBnetIP_dump(*args)
    def setValuesFromCSV(*args): return _rllib.rlEIBnetIP_setValuesFromCSV(*args)
    __swig_setmethods__["debug"] = _rllib.rlEIBnetIP_debug_set
    __swig_getmethods__["debug"] = _rllib.rlEIBnetIP_debug_get
    if _newclass:debug = _swig_property(_rllib.rlEIBnetIP_debug_get, _rllib.rlEIBnetIP_debug_set)
    __swig_setmethods__["watch_eib"] = _rllib.rlEIBnetIP_watch_eib_set
    __swig_getmethods__["watch_eib"] = _rllib.rlEIBnetIP_watch_eib_get
    if _newclass:watch_eib = _swig_property(_rllib.rlEIBnetIP_watch_eib_get, _rllib.rlEIBnetIP_watch_eib_set)
    def connect(*args): return _rllib.rlEIBnetIP_connect(*args)
    def disconnect(*args): return _rllib.rlEIBnetIP_disconnect(*args)
    def isConnected(*args): return _rllib.rlEIBnetIP_isConnected(*args)
    def recv(*args): return _rllib.rlEIBnetIP_recv(*args)
    def storeBuffer(*args): return _rllib.rlEIBnetIP_storeBuffer(*args)
    def sendDisconnectRequest(*args): return _rllib.rlEIBnetIP_sendDisconnectRequest(*args)
    __swig_setmethods__["mem"] = _rllib.rlEIBnetIP_mem_set
    __swig_getmethods__["mem"] = _rllib.rlEIBnetIP_mem_get
    if _newclass:mem = _swig_property(_rllib.rlEIBnetIP_mem_get, _rllib.rlEIBnetIP_mem_set)
    __swig_setmethods__["memsize"] = _rllib.rlEIBnetIP_memsize_set
    __swig_getmethods__["memsize"] = _rllib.rlEIBnetIP_memsize_get
    if _newclass:memsize = _swig_property(_rllib.rlEIBnetIP_memsize_get, _rllib.rlEIBnetIP_memsize_set)
    __swig_setmethods__["running"] = _rllib.rlEIBnetIP_running_set
    __swig_getmethods__["running"] = _rllib.rlEIBnetIP_running_get
    if _newclass:running = _swig_property(_rllib.rlEIBnetIP_running_get, _rllib.rlEIBnetIP_running_set)
    __swig_setmethods__["channelid"] = _rllib.rlEIBnetIP_channelid_set
    __swig_getmethods__["channelid"] = _rllib.rlEIBnetIP_channelid_get
    if _newclass:channelid = _swig_property(_rllib.rlEIBnetIP_channelid_get, _rllib.rlEIBnetIP_channelid_set)
    __swig_setmethods__["thread"] = _rllib.rlEIBnetIP_thread_set
    __swig_getmethods__["thread"] = _rllib.rlEIBnetIP_thread_get
    if _newclass:thread = _swig_property(_rllib.rlEIBnetIP_thread_get, _rllib.rlEIBnetIP_thread_set)
    __swig_setmethods__["server"] = _rllib.rlEIBnetIP_server_set
    __swig_getmethods__["server"] = _rllib.rlEIBnetIP_server_get
    if _newclass:server = _swig_property(_rllib.rlEIBnetIP_server_get, _rllib.rlEIBnetIP_server_set)
    __swig_setmethods__["send_sequencecounter"] = _rllib.rlEIBnetIP_send_sequencecounter_set
    __swig_getmethods__["send_sequencecounter"] = _rllib.rlEIBnetIP_send_sequencecounter_get
    if _newclass:send_sequencecounter = _swig_property(_rllib.rlEIBnetIP_send_sequencecounter_get, _rllib.rlEIBnetIP_send_sequencecounter_set)
    __swig_setmethods__["tunnel_ack"] = _rllib.rlEIBnetIP_tunnel_ack_set
    __swig_getmethods__["tunnel_ack"] = _rllib.rlEIBnetIP_tunnel_ack_get
    if _newclass:tunnel_ack = _swig_property(_rllib.rlEIBnetIP_tunnel_ack_get, _rllib.rlEIBnetIP_tunnel_ack_set)
    __swig_setmethods__["provider"] = _rllib.rlEIBnetIP_provider_set
    __swig_getmethods__["provider"] = _rllib.rlEIBnetIP_provider_get
    if _newclass:provider = _swig_property(_rllib.rlEIBnetIP_provider_get, _rllib.rlEIBnetIP_provider_set)
rlEIBnetIP_swigregister = _rllib.rlEIBnetIP_swigregister
rlEIBnetIP_swigregister(rlEIBnetIP)

class rlEIBnetIP_EIB_TEL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlEIBnetIP_EIB_TEL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlEIBnetIP_EIB_TEL, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _rllib.rlEIBnetIP_EIB_TEL_mc_set
    __swig_getmethods__["mc"] = _rllib.rlEIBnetIP_EIB_TEL_mc_get
    if _newclass:mc = _swig_property(_rllib.rlEIBnetIP_EIB_TEL_mc_get, _rllib.rlEIBnetIP_EIB_TEL_mc_set)
    __swig_setmethods__["addi1"] = _rllib.rlEIBnetIP_EIB_TEL_addi1_set
    __swig_getmethods__["addi1"] = _rllib.rlEIBnetIP_EIB_TEL_addi1_get
    if _newclass:addi1 = _swig_property(_rllib.rlEIBnetIP_EIB_TEL_addi1_get, _rllib.rlEIBnetIP_EIB_TEL_addi1_set)
    __swig_setmethods__["ctrl1"] = _rllib.rlEIBnetIP_EIB_TEL_ctrl1_set
    __swig_getmethods__["ctrl1"] = _rllib.rlEIBnetIP_EIB_TEL_ctrl1_get
    if _newclass:ctrl1 = _swig_property(_rllib.rlEIBnetIP_EIB_TEL_ctrl1_get, _rllib.rlEIBnetIP_EIB_TEL_ctrl1_set)
    __swig_setmethods__["ctrl2"] = _rllib.rlEIBnetIP_EIB_TEL_ctrl2_set
    __swig_getmethods__["ctrl2"] = _rllib.rlEIBnetIP_EIB_TEL_ctrl2_get
    if _newclass:ctrl2 = _swig_property(_rllib.rlEIBnetIP_EIB_TEL_ctrl2_get, _rllib.rlEIBnetIP_EIB_TEL_ctrl2_set)
    __swig_setmethods__["saddr"] = _rllib.rlEIBnetIP_EIB_TEL_saddr_set
    __swig_getmethods__["saddr"] = _rllib.rlEIBnetIP_EIB_TEL_saddr_get
    if _newclass:saddr = _swig_property(_rllib.rlEIBnetIP_EIB_TEL_saddr_get, _rllib.rlEIBnetIP_EIB_TEL_saddr_set)
    __swig_setmethods__["daddr"] = _rllib.rlEIBnetIP_EIB_TEL_daddr_set
    __swig_getmethods__["daddr"] = _rllib.rlEIBnetIP_EIB_TEL_daddr_get
    if _newclass:daddr = _swig_property(_rllib.rlEIBnetIP_EIB_TEL_daddr_get, _rllib.rlEIBnetIP_EIB_TEL_daddr_set)
    __swig_setmethods__["apci_length"] = _rllib.rlEIBnetIP_EIB_TEL_apci_length_set
    __swig_getmethods__["apci_length"] = _rllib.rlEIBnetIP_EIB_TEL_apci_length_get
    if _newclass:apci_length = _swig_property(_rllib.rlEIBnetIP_EIB_TEL_apci_length_get, _rllib.rlEIBnetIP_EIB_TEL_apci_length_set)
    __swig_setmethods__["apci"] = _rllib.rlEIBnetIP_EIB_TEL_apci_set
    __swig_getmethods__["apci"] = _rllib.rlEIBnetIP_EIB_TEL_apci_get
    if _newclass:apci = _swig_property(_rllib.rlEIBnetIP_EIB_TEL_apci_get, _rllib.rlEIBnetIP_EIB_TEL_apci_set)
    __swig_setmethods__["val"] = _rllib.rlEIBnetIP_EIB_TEL_val_set
    __swig_getmethods__["val"] = _rllib.rlEIBnetIP_EIB_TEL_val_get
    if _newclass:val = _swig_property(_rllib.rlEIBnetIP_EIB_TEL_val_get, _rllib.rlEIBnetIP_EIB_TEL_val_set)
    def __init__(self, *args): 
        this = _rllib.new_rlEIBnetIP_EIB_TEL(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlEIBnetIP_EIB_TEL
    __del__ = lambda self : None;
rlEIBnetIP_EIB_TEL_swigregister = _rllib.rlEIBnetIP_EIB_TEL_swigregister
rlEIBnetIP_EIB_TEL_swigregister(rlEIBnetIP_EIB_TEL)

class rlEIBnetIP_PDU(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlEIBnetIP_PDU, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlEIBnetIP_PDU, name)
    __repr__ = _swig_repr
    __swig_setmethods__["headersize"] = _rllib.rlEIBnetIP_PDU_headersize_set
    __swig_getmethods__["headersize"] = _rllib.rlEIBnetIP_PDU_headersize_get
    if _newclass:headersize = _swig_property(_rllib.rlEIBnetIP_PDU_headersize_get, _rllib.rlEIBnetIP_PDU_headersize_set)
    __swig_setmethods__["version"] = _rllib.rlEIBnetIP_PDU_version_set
    __swig_getmethods__["version"] = _rllib.rlEIBnetIP_PDU_version_get
    if _newclass:version = _swig_property(_rllib.rlEIBnetIP_PDU_version_get, _rllib.rlEIBnetIP_PDU_version_set)
    __swig_setmethods__["servicetype"] = _rllib.rlEIBnetIP_PDU_servicetype_set
    __swig_getmethods__["servicetype"] = _rllib.rlEIBnetIP_PDU_servicetype_get
    if _newclass:servicetype = _swig_property(_rllib.rlEIBnetIP_PDU_servicetype_get, _rllib.rlEIBnetIP_PDU_servicetype_set)
    __swig_setmethods__["totalsize"] = _rllib.rlEIBnetIP_PDU_totalsize_set
    __swig_getmethods__["totalsize"] = _rllib.rlEIBnetIP_PDU_totalsize_get
    if _newclass:totalsize = _swig_property(_rllib.rlEIBnetIP_PDU_totalsize_get, _rllib.rlEIBnetIP_PDU_totalsize_set)
    __swig_setmethods__["data"] = _rllib.rlEIBnetIP_PDU_data_set
    __swig_getmethods__["data"] = _rllib.rlEIBnetIP_PDU_data_get
    if _newclass:data = _swig_property(_rllib.rlEIBnetIP_PDU_data_get, _rllib.rlEIBnetIP_PDU_data_set)
    def __init__(self, *args): 
        this = _rllib.new_rlEIBnetIP_PDU(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlEIBnetIP_PDU
    __del__ = lambda self : None;
rlEIBnetIP_PDU_swigregister = _rllib.rlEIBnetIP_PDU_swigregister
rlEIBnetIP_PDU_swigregister(rlEIBnetIP_PDU)

class rlOpcXmlDa(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlOpcXmlDa, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlOpcXmlDa, name)
    __repr__ = _swig_repr
    OPCXMLDA_ERROR = _rllib.rlOpcXmlDa_OPCXMLDA_ERROR
    def __init__(self, *args): 
        this = _rllib.new_rlOpcXmlDa(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlOpcXmlDa
    __del__ = lambda self : None;
    def stringValue(*args): return _rllib.rlOpcXmlDa_stringValue(*args)
    def intValue(*args): return _rllib.rlOpcXmlDa_intValue(*args)
    def floatValue(*args): return _rllib.rlOpcXmlDa_floatValue(*args)
    def writeStringValue(*args): return _rllib.rlOpcXmlDa_writeStringValue(*args)
    def writeIntValue(*args): return _rllib.rlOpcXmlDa_writeIntValue(*args)
    def writeFloatValue(*args): return _rllib.rlOpcXmlDa_writeFloatValue(*args)
    def readErrorCount(*args): return _rllib.rlOpcXmlDa_readErrorCount(*args)
    def writeErrorCount(*args): return _rllib.rlOpcXmlDa_writeErrorCount(*args)
    def shmStatus(*args): return _rllib.rlOpcXmlDa_shmStatus(*args)
rlOpcXmlDa_swigregister = _rllib.rlOpcXmlDa_swigregister
rlOpcXmlDa_swigregister(rlOpcXmlDa)

class rlOpcXmlDa_SHM_HEADER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlOpcXmlDa_SHM_HEADER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlOpcXmlDa_SHM_HEADER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ident"] = _rllib.rlOpcXmlDa_SHM_HEADER_ident_set
    __swig_getmethods__["ident"] = _rllib.rlOpcXmlDa_SHM_HEADER_ident_get
    if _newclass:ident = _swig_property(_rllib.rlOpcXmlDa_SHM_HEADER_ident_get, _rllib.rlOpcXmlDa_SHM_HEADER_ident_set)
    __swig_setmethods__["maxItemNameLength"] = _rllib.rlOpcXmlDa_SHM_HEADER_maxItemNameLength_set
    __swig_getmethods__["maxItemNameLength"] = _rllib.rlOpcXmlDa_SHM_HEADER_maxItemNameLength_get
    if _newclass:maxItemNameLength = _swig_property(_rllib.rlOpcXmlDa_SHM_HEADER_maxItemNameLength_get, _rllib.rlOpcXmlDa_SHM_HEADER_maxItemNameLength_set)
    __swig_setmethods__["maxNameLength"] = _rllib.rlOpcXmlDa_SHM_HEADER_maxNameLength_set
    __swig_getmethods__["maxNameLength"] = _rllib.rlOpcXmlDa_SHM_HEADER_maxNameLength_get
    if _newclass:maxNameLength = _swig_property(_rllib.rlOpcXmlDa_SHM_HEADER_maxNameLength_get, _rllib.rlOpcXmlDa_SHM_HEADER_maxNameLength_set)
    __swig_setmethods__["numItems"] = _rllib.rlOpcXmlDa_SHM_HEADER_numItems_set
    __swig_getmethods__["numItems"] = _rllib.rlOpcXmlDa_SHM_HEADER_numItems_get
    if _newclass:numItems = _swig_property(_rllib.rlOpcXmlDa_SHM_HEADER_numItems_get, _rllib.rlOpcXmlDa_SHM_HEADER_numItems_set)
    __swig_setmethods__["readErrorCount"] = _rllib.rlOpcXmlDa_SHM_HEADER_readErrorCount_set
    __swig_getmethods__["readErrorCount"] = _rllib.rlOpcXmlDa_SHM_HEADER_readErrorCount_get
    if _newclass:readErrorCount = _swig_property(_rllib.rlOpcXmlDa_SHM_HEADER_readErrorCount_get, _rllib.rlOpcXmlDa_SHM_HEADER_readErrorCount_set)
    __swig_setmethods__["writeErrorCount"] = _rllib.rlOpcXmlDa_SHM_HEADER_writeErrorCount_set
    __swig_getmethods__["writeErrorCount"] = _rllib.rlOpcXmlDa_SHM_HEADER_writeErrorCount_get
    if _newclass:writeErrorCount = _swig_property(_rllib.rlOpcXmlDa_SHM_HEADER_writeErrorCount_get, _rllib.rlOpcXmlDa_SHM_HEADER_writeErrorCount_set)
    __swig_setmethods__["spare"] = _rllib.rlOpcXmlDa_SHM_HEADER_spare_set
    __swig_getmethods__["spare"] = _rllib.rlOpcXmlDa_SHM_HEADER_spare_get
    if _newclass:spare = _swig_property(_rllib.rlOpcXmlDa_SHM_HEADER_spare_get, _rllib.rlOpcXmlDa_SHM_HEADER_spare_set)
    __swig_setmethods__["cspare"] = _rllib.rlOpcXmlDa_SHM_HEADER_cspare_set
    __swig_getmethods__["cspare"] = _rllib.rlOpcXmlDa_SHM_HEADER_cspare_get
    if _newclass:cspare = _swig_property(_rllib.rlOpcXmlDa_SHM_HEADER_cspare_get, _rllib.rlOpcXmlDa_SHM_HEADER_cspare_set)
    def __init__(self, *args): 
        this = _rllib.new_rlOpcXmlDa_SHM_HEADER(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlOpcXmlDa_SHM_HEADER
    __del__ = lambda self : None;
rlOpcXmlDa_SHM_HEADER_swigregister = _rllib.rlOpcXmlDa_SHM_HEADER_swigregister
rlOpcXmlDa_SHM_HEADER_swigregister(rlOpcXmlDa_SHM_HEADER)

class rlDataAcquisition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlDataAcquisition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlDataAcquisition, name)
    __repr__ = _swig_repr
    DAQ_ERROR = _rllib.rlDataAcquisition_DAQ_ERROR
    def __init__(self, *args): 
        this = _rllib.new_rlDataAcquisition(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlDataAcquisition
    __del__ = lambda self : None;
    def stringValue(*args): return _rllib.rlDataAcquisition_stringValue(*args)
    def intValue(*args): return _rllib.rlDataAcquisition_intValue(*args)
    def floatValue(*args): return _rllib.rlDataAcquisition_floatValue(*args)
    def writeStringValue(*args): return _rllib.rlDataAcquisition_writeStringValue(*args)
    def writeIntValue(*args): return _rllib.rlDataAcquisition_writeIntValue(*args)
    def writeFloatValue(*args): return _rllib.rlDataAcquisition_writeFloatValue(*args)
    def readErrorCount(*args): return _rllib.rlDataAcquisition_readErrorCount(*args)
    def writeErrorCount(*args): return _rllib.rlDataAcquisition_writeErrorCount(*args)
    def firstVariable(*args): return _rllib.rlDataAcquisition_firstVariable(*args)
    def nextVariable(*args): return _rllib.rlDataAcquisition_nextVariable(*args)
    def shmStatus(*args): return _rllib.rlDataAcquisition_shmStatus(*args)
rlDataAcquisition_swigregister = _rllib.rlDataAcquisition_swigregister
rlDataAcquisition_swigregister(rlDataAcquisition)

class rlDataAcquisition_SHM_HEADER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlDataAcquisition_SHM_HEADER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlDataAcquisition_SHM_HEADER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ident"] = _rllib.rlDataAcquisition_SHM_HEADER_ident_set
    __swig_getmethods__["ident"] = _rllib.rlDataAcquisition_SHM_HEADER_ident_get
    if _newclass:ident = _swig_property(_rllib.rlDataAcquisition_SHM_HEADER_ident_get, _rllib.rlDataAcquisition_SHM_HEADER_ident_set)
    __swig_setmethods__["maxItemNameLength"] = _rllib.rlDataAcquisition_SHM_HEADER_maxItemNameLength_set
    __swig_getmethods__["maxItemNameLength"] = _rllib.rlDataAcquisition_SHM_HEADER_maxItemNameLength_get
    if _newclass:maxItemNameLength = _swig_property(_rllib.rlDataAcquisition_SHM_HEADER_maxItemNameLength_get, _rllib.rlDataAcquisition_SHM_HEADER_maxItemNameLength_set)
    __swig_setmethods__["maxNameLength"] = _rllib.rlDataAcquisition_SHM_HEADER_maxNameLength_set
    __swig_getmethods__["maxNameLength"] = _rllib.rlDataAcquisition_SHM_HEADER_maxNameLength_get
    if _newclass:maxNameLength = _swig_property(_rllib.rlDataAcquisition_SHM_HEADER_maxNameLength_get, _rllib.rlDataAcquisition_SHM_HEADER_maxNameLength_set)
    __swig_setmethods__["numItems"] = _rllib.rlDataAcquisition_SHM_HEADER_numItems_set
    __swig_getmethods__["numItems"] = _rllib.rlDataAcquisition_SHM_HEADER_numItems_get
    if _newclass:numItems = _swig_property(_rllib.rlDataAcquisition_SHM_HEADER_numItems_get, _rllib.rlDataAcquisition_SHM_HEADER_numItems_set)
    __swig_setmethods__["readErrorCount"] = _rllib.rlDataAcquisition_SHM_HEADER_readErrorCount_set
    __swig_getmethods__["readErrorCount"] = _rllib.rlDataAcquisition_SHM_HEADER_readErrorCount_get
    if _newclass:readErrorCount = _swig_property(_rllib.rlDataAcquisition_SHM_HEADER_readErrorCount_get, _rllib.rlDataAcquisition_SHM_HEADER_readErrorCount_set)
    __swig_setmethods__["writeErrorCount"] = _rllib.rlDataAcquisition_SHM_HEADER_writeErrorCount_set
    __swig_getmethods__["writeErrorCount"] = _rllib.rlDataAcquisition_SHM_HEADER_writeErrorCount_get
    if _newclass:writeErrorCount = _swig_property(_rllib.rlDataAcquisition_SHM_HEADER_writeErrorCount_get, _rllib.rlDataAcquisition_SHM_HEADER_writeErrorCount_set)
    __swig_setmethods__["spare"] = _rllib.rlDataAcquisition_SHM_HEADER_spare_set
    __swig_getmethods__["spare"] = _rllib.rlDataAcquisition_SHM_HEADER_spare_get
    if _newclass:spare = _swig_property(_rllib.rlDataAcquisition_SHM_HEADER_spare_get, _rllib.rlDataAcquisition_SHM_HEADER_spare_set)
    __swig_setmethods__["cspare"] = _rllib.rlDataAcquisition_SHM_HEADER_cspare_set
    __swig_getmethods__["cspare"] = _rllib.rlDataAcquisition_SHM_HEADER_cspare_get
    if _newclass:cspare = _swig_property(_rllib.rlDataAcquisition_SHM_HEADER_cspare_get, _rllib.rlDataAcquisition_SHM_HEADER_cspare_set)
    def __init__(self, *args): 
        this = _rllib.new_rlDataAcquisition_SHM_HEADER(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlDataAcquisition_SHM_HEADER
    __del__ = lambda self : None;
rlDataAcquisition_SHM_HEADER_swigregister = _rllib.rlDataAcquisition_SHM_HEADER_swigregister
rlDataAcquisition_SHM_HEADER_swigregister(rlDataAcquisition_SHM_HEADER)

class rlDataAcquisitionProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlDataAcquisitionProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlDataAcquisitionProvider, name)
    __repr__ = _swig_repr
    DAQ_PROVIDER_ERROR = _rllib.rlDataAcquisitionProvider_DAQ_PROVIDER_ERROR
    def __init__(self, *args): 
        this = _rllib.new_rlDataAcquisitionProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlDataAcquisitionProvider
    __del__ = lambda self : None;
    def readItemList(*args): return _rllib.rlDataAcquisitionProvider_readItemList(*args)
    def firstItem(*args): return _rllib.rlDataAcquisitionProvider_firstItem(*args)
    def nextItem(*args): return _rllib.rlDataAcquisitionProvider_nextItem(*args)
    def stringValue(*args): return _rllib.rlDataAcquisitionProvider_stringValue(*args)
    def intValue(*args): return _rllib.rlDataAcquisitionProvider_intValue(*args)
    def floatValue(*args): return _rllib.rlDataAcquisitionProvider_floatValue(*args)
    def setStringValue(*args): return _rllib.rlDataAcquisitionProvider_setStringValue(*args)
    def setIntValue(*args): return _rllib.rlDataAcquisitionProvider_setIntValue(*args)
    def setFloatValue(*args): return _rllib.rlDataAcquisitionProvider_setFloatValue(*args)
    def readErrorCount(*args): return _rllib.rlDataAcquisitionProvider_readErrorCount(*args)
    def writeErrorCount(*args): return _rllib.rlDataAcquisitionProvider_writeErrorCount(*args)
    def setReadErrorCount(*args): return _rllib.rlDataAcquisitionProvider_setReadErrorCount(*args)
    def setWriteErrorCount(*args): return _rllib.rlDataAcquisitionProvider_setWriteErrorCount(*args)
    def shmStatus(*args): return _rllib.rlDataAcquisitionProvider_shmStatus(*args)
    def setAllowAddValues(*args): return _rllib.rlDataAcquisitionProvider_setAllowAddValues(*args)
rlDataAcquisitionProvider_swigregister = _rllib.rlDataAcquisitionProvider_swigregister
rlDataAcquisitionProvider_swigregister(rlDataAcquisitionProvider)

class rlDataAcquisitionProvider_SHM_HEADER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rlDataAcquisitionProvider_SHM_HEADER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rlDataAcquisitionProvider_SHM_HEADER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ident"] = _rllib.rlDataAcquisitionProvider_SHM_HEADER_ident_set
    __swig_getmethods__["ident"] = _rllib.rlDataAcquisitionProvider_SHM_HEADER_ident_get
    if _newclass:ident = _swig_property(_rllib.rlDataAcquisitionProvider_SHM_HEADER_ident_get, _rllib.rlDataAcquisitionProvider_SHM_HEADER_ident_set)
    __swig_setmethods__["maxItemNameLength"] = _rllib.rlDataAcquisitionProvider_SHM_HEADER_maxItemNameLength_set
    __swig_getmethods__["maxItemNameLength"] = _rllib.rlDataAcquisitionProvider_SHM_HEADER_maxItemNameLength_get
    if _newclass:maxItemNameLength = _swig_property(_rllib.rlDataAcquisitionProvider_SHM_HEADER_maxItemNameLength_get, _rllib.rlDataAcquisitionProvider_SHM_HEADER_maxItemNameLength_set)
    __swig_setmethods__["maxNameLength"] = _rllib.rlDataAcquisitionProvider_SHM_HEADER_maxNameLength_set
    __swig_getmethods__["maxNameLength"] = _rllib.rlDataAcquisitionProvider_SHM_HEADER_maxNameLength_get
    if _newclass:maxNameLength = _swig_property(_rllib.rlDataAcquisitionProvider_SHM_HEADER_maxNameLength_get, _rllib.rlDataAcquisitionProvider_SHM_HEADER_maxNameLength_set)
    __swig_setmethods__["numItems"] = _rllib.rlDataAcquisitionProvider_SHM_HEADER_numItems_set
    __swig_getmethods__["numItems"] = _rllib.rlDataAcquisitionProvider_SHM_HEADER_numItems_get
    if _newclass:numItems = _swig_property(_rllib.rlDataAcquisitionProvider_SHM_HEADER_numItems_get, _rllib.rlDataAcquisitionProvider_SHM_HEADER_numItems_set)
    __swig_setmethods__["readErrorCount"] = _rllib.rlDataAcquisitionProvider_SHM_HEADER_readErrorCount_set
    __swig_getmethods__["readErrorCount"] = _rllib.rlDataAcquisitionProvider_SHM_HEADER_readErrorCount_get
    if _newclass:readErrorCount = _swig_property(_rllib.rlDataAcquisitionProvider_SHM_HEADER_readErrorCount_get, _rllib.rlDataAcquisitionProvider_SHM_HEADER_readErrorCount_set)
    __swig_setmethods__["writeErrorCount"] = _rllib.rlDataAcquisitionProvider_SHM_HEADER_writeErrorCount_set
    __swig_getmethods__["writeErrorCount"] = _rllib.rlDataAcquisitionProvider_SHM_HEADER_writeErrorCount_get
    if _newclass:writeErrorCount = _swig_property(_rllib.rlDataAcquisitionProvider_SHM_HEADER_writeErrorCount_get, _rllib.rlDataAcquisitionProvider_SHM_HEADER_writeErrorCount_set)
    __swig_setmethods__["spare"] = _rllib.rlDataAcquisitionProvider_SHM_HEADER_spare_set
    __swig_getmethods__["spare"] = _rllib.rlDataAcquisitionProvider_SHM_HEADER_spare_get
    if _newclass:spare = _swig_property(_rllib.rlDataAcquisitionProvider_SHM_HEADER_spare_get, _rllib.rlDataAcquisitionProvider_SHM_HEADER_spare_set)
    __swig_setmethods__["cspare"] = _rllib.rlDataAcquisitionProvider_SHM_HEADER_cspare_set
    __swig_getmethods__["cspare"] = _rllib.rlDataAcquisitionProvider_SHM_HEADER_cspare_get
    if _newclass:cspare = _swig_property(_rllib.rlDataAcquisitionProvider_SHM_HEADER_cspare_get, _rllib.rlDataAcquisitionProvider_SHM_HEADER_cspare_set)
    def __init__(self, *args): 
        this = _rllib.new_rlDataAcquisitionProvider_SHM_HEADER(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rllib.delete_rlDataAcquisitionProvider_SHM_HEADER
    __del__ = lambda self : None;
rlDataAcquisitionProvider_SHM_HEADER_swigregister = _rllib.rlDataAcquisitionProvider_SHM_HEADER_swigregister
rlDataAcquisitionProvider_SHM_HEADER_swigregister(rlDataAcquisitionProvider_SHM_HEADER)



